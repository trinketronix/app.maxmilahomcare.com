<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?=$pageTitle ?? 'My Visits'?></title>

    <!-- Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">

    <style>
        html, body {
            height: 100vh; overflow: hidden; background-color: #f0f2f5;
            font-family: 'Segoe UI', 'Roboto', sans-serif;
        }
        .page-container {
            display: flex; flex-direction: column; height: 100vh; max-width: 500px;
            margin: 0 auto; background-color: #ffffff; border-left: 1px solid #dcdcdc; border-right: 1px solid #dcdcdc; position: relative;
        }
        .header { display: flex; justify-content: space-between; align-items: center; padding: 1rem; position: relative; flex-shrink: 0; }
        .back-button { text-decoration: none; color: #333; font-weight: 500; }
        .header-title { font-size: 2.2rem; font-weight: bold; margin: 0; position: absolute; left: 50%; transform: translateX(-50%); }
        .profile { text-align: center; }
        .profile-icon { font-size: 1.5rem; border: 2px solid #000; border-radius: 50%; width: 45px; height: 45px; display: flex; align-items: center; justify-content: center; margin: 0 auto; overflow: hidden; }
        .profile-icon img { width: 100%; height: 100%; object-fit: cover; }
        .profile-username { font-size: 0.8rem; color: #555; margin-top: 4px; }
        .controls-section { padding: 1rem; background-color: #f8f9fa; border-bottom: 1px solid #e0e0e0; flex-shrink: 0; }
        .search-bar .form-control, .search-bar .btn { border-radius: 8px; border: 2px solid #000; }
        .filter-group { border: 2px solid #000; border-radius: 10px; padding: 0.5rem; }
        .filter-buttons { display: flex; overflow-x: auto; gap: 0.5rem; }
        .filter-buttons::-webkit-scrollbar { display: none; }
        .filter-btn { border: 2px solid #000; border-radius: 8px; background-color: #fff; color: #000; font-weight: 500; white-space: nowrap; }
        .filter-btn.active { background-color: #000; color: #fff; }

        .visit-list-container { flex-grow: 1; overflow-y: auto; padding: 1rem; padding-bottom: 120px; }
        .visit-card { display: grid; grid-template-columns: auto 1fr; gap: 1rem; align-items: center; border: 2px solid #000; border-radius: 15px; padding: 1rem; margin-bottom: 1rem; cursor: pointer; }
        .visit-card:hover { background-color: #f1f1f1; }
        .visit-person { text-align: center; }
        .visit-person-avatar { width: 60px; height: 60px; border: 3px solid #000; border-radius: 50%; overflow: hidden; margin: 0 auto 0.5rem auto; display:flex; align-items:center; justify-content:center; }
        .visit-person-avatar img { width: 100%; height: 100%; object-fit: cover; }
        .visit-person-name { font-weight: 500; }
        .visit-details { text-align: right; }
        .visit-date { font-weight: bold; font-size: 1.1rem; }
        .visit-relative-time, .visit-progress { color: #555; }
        .visit-progress-canceled { color: #dc3545; font-weight: bold; }

        .fab { position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); width: 90px; height: 90px; border-radius: 50%; background-color: #e0e0e0; border: 3px solid #000; display: flex; flex-direction: column; align-items: center; justify-content: center; font-weight: 500; text-decoration: none; color: #000; z-index: 1040; }

        /* Offcanvas & Modals */
        .offcanvas-body { display: flex; flex-direction: column; }
        #assignVisitOffcanvas .nav-tabs .nav-link { border: 2px solid #000 !important; border-bottom: 0 !important; color: #000; margin-right: 2px; }
        #assignVisitOffcanvas .nav-tabs .nav-link.active { background-color: #0d6efd; color: #fff; border-color: #0d6efd !important;}
        #assignVisitOffcanvas .nav-tabs .nav-link.disabled { color: #aaa; border-color: #aaa !important; background-color: #f8f9fa; }
        .tab-pane { padding-top: 1rem; display: flex; flex-direction: column; flex-grow: 1; }
        .selection-list { flex-grow: 1; overflow-y: auto; margin-top: 1rem; padding-bottom: 1rem; }
        .selection-item { display: flex; align-items: center; gap: 1rem; border: 2px solid #ccc; border-radius: 15px; padding: 0.75rem; margin-bottom: 0.5rem; cursor: pointer; }
        .selection-item.selected { border-color: #0d6efd; background-color: #eef5ff; }
        #create-visit-btn { border: 2px solid #000; font-weight: bold; margin: 20px 0; }
        .time-picker-wrapper { display: flex; justify-content: center; align-items: center; gap: 0.5rem; margin-top: 2rem; }
        .actions-modal-body { display: flex; justify-content: space-around; text-align: center; }
        .action-option { cursor: pointer; text-decoration: none; color: #000; font-weight: 500; }
        .action-option i { font-size: 2.5rem; margin-bottom: 0.5rem; display: block; width: 60px; height: 60px; line-height: 60px; border-radius: 15px; background-color: #000; color: #fff; }
        .action-option .checkout-icon { border: 3px solid #000; background: #fff; color: #000;}

        @media (min-width: 768px) { .page-container { max-width: 720px; } }
    </style>
</head>
<body>

<div id="alert-container" style="position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index: 2000; width: 90%; max-width: 480px;"></div>

<div class="page-container">
    <header class="header">
        <a href="/signout" class="back-button"><i class="fas fa-chevron-left"></i> sign out</a>
        <h1 class="header-title">My Visits</h1>
        <!--<div class="profile"><div class="profile-icon"><img src="<?=$photo?>" alt="avatar"></div><span class="profile-username"><?=$fullname?></span></div> -->
        <div class="profile" id="profile-link" style="cursor:pointer;">
            <div class="profile-icon">
                <img src="<?=$photo?>" alt="avatar">
            </div>
            <span class="profile-username"><?=$fullname?></span>
        </div>

        <script>
            document.getElementById('profile-link').addEventListener('click', () => {
                // Redirect to caregiverâ€™s own profile
                window.location.href = '/caregiver/profile/<?=$userId?>';
            });
        </script>

    </header>
    <section class="controls-section">
        <div class="input-group search-bar mb-3"><input type="text" id="search-input-main" class="form-control" placeholder="Search by patient name..."><button class="btn btn-dark" type="button" id="main-search-btn">Search</button></div>
        <div class="filter-group"><div class="filter-buttons"><small class="align-self-center me-2">Progress:</small><button class="btn filter-btn active" data-filter-value="all">All</button><button class="btn filter-btn" data-filter-value="0">Scheduled</button><button class="btn filter-btn" data-filter-value="1">Check-in</button><button class="btn filter-btn" data-filter-value="2">Check-out</button><button class="btn filter-btn" data-filter-value="3">Approved</button><button class="btn filter-btn" data-filter-value="-1">Canceled</button></div></div>
    </section>
    <main class="visit-list-container"><div id="visit-list"><div class="text-center p-5"><div class="spinner-border"></div></div></div></main>
</div>
<a href="#" class="fab" id="add-visit-btn"><div class="plus-icon">+</div><div>Visit</div></a>

<!-- All Modals and Offcanvas -->
<div class="offcanvas offcanvas-bottom h-100" tabindex="-1" id="assignVisitOffcanvas"><div class="offcanvas-header"><h5 class="offcanvas-title w-100 text-center">Schedule Visit</h5><button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas"></button></div><div class="offcanvas-body"><ul class="nav nav-tabs" id="visit-tabs" role="tablist"><li class="nav-item" role="presentation"><button class="nav-link active" id="patient-tab-btn" data-bs-toggle="tab" data-bs-target="#patient-tab" type="button">Patient</button></li><li class="nav-item" role="presentation"><button class="nav-link disabled" id="address-tab-btn" data-bs-toggle="tab" data-bs-target="#address-tab" type="button">Address</button></li><li class="nav-item" role="presentation"><button class="nav-link" id="date-tab-btn" data-bs-toggle="tab" data-bs-target="#date-tab" type="button">Date</button></li><li class="nav-item" role="presentation"><button class="nav-link" id="start-tab-btn" data-bs-toggle="tab" data-bs-target="#start-tab" type="button">Start</button></li><li class="nav-item" role="presentation"><button class="nav-link" id="duration-tab-btn" data-bs-toggle="tab" data-bs-target="#duration-tab" type="button">Duration</button></li></ul><div class="tab-content flex-grow-1" id="visit-tabs-content"><div class="tab-pane fade show active" id="patient-tab"><div class="input-group search-bar"><input type="text" id="patient-search" class="form-control" placeholder="Search my patients..."></div><div class="selection-list" id="patient-selection-list"></div></div><div class="tab-pane fade" id="address-tab"><div id="address-selection-placeholder" class="text-center text-muted mt-5">Please select a patient first.</div><div id="address-selection-content" style="display:none;"><div class="input-group search-bar"><input type="text" id="address-search" class="form-control" placeholder="Search address..."></div><div class="selection-list" id="address-selection-list"></div></div></div><div class="tab-pane fade" id="date-tab"><div id="datepicker-container" class="pt-3"></div></div><div class="tab-pane fade d-flex justify-content-center align-items-center" id="start-tab"><div id="start-time-picker"></div></div><div class="tab-pane fade d-flex justify-content-center align-items-center" id="duration-tab"><div class="w-75"><label for="total-hours-select" class="form-label fs-5 text-center w-100">Select Total Hours</label><select class="form-select form-select-lg" id="total-hours-select"><option selected disabled>Choose duration...</option><option value="1">1 Hour</option><option value="2">2 Hours</option><option value="3">3 Hours</option><option value="4">4 Hours</option><option value="5">5 Hours</option><option value="6">6 Hours</option><option value="7">7 Hours</option><option value="8">8 Hours</option></select></div></div></div><button type="button" class="btn btn-primary" id="create-visit-btn" style="display:none;">Create Visit</button></div></div>
<div class="modal fade" id="visitConfirmationModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Confirm Visit</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body" id="visit-confirmation-text"></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="button" class="btn btn-primary" id="confirm-create-visit-btn">OK</button></div></div></div></div>
<div class="modal fade" id="actionsModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content" style="border-radius: 1rem; border: 2px solid #000;"><div class="modal-header"><h5 class="modal-title w-100 text-center" id="actions-modal-title">Actions</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body p-4 actions-modal-body"><a id="action-navigate-btn" href="#" target="_blank" class="action-option"><i><i class="fa-solid fa-route"></i></i>Navigate</a><a href="#" id="action-checkin-btn" class="action-option"><i><i class="fa-solid fa-check"></i></i>Checkin</a><a href="#" id="action-checkout-btn" class="action-option"><i class="checkout-icon"><i class="fa-solid fa-check"></i></i>Checkout</a><a id="action-detail-btn" href="#" class="action-option"><i><i class="fa-solid fa-circle-info"></i></i>Detail</a></div></div></div></div>
<div class="modal fade" id="cancelConfirmModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content" style="border-radius: 1rem; border: 2px solid #000;"><div class="modal-header"><h5 class="modal-title w-100 text-center fw-bold">Cancel Visit</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body text-center fs-5 py-4">Are you sure you want to cancel this visit?</div><div class="modal-footer justify-content-center border-0"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button><button type="button" class="btn btn-danger" id="confirm-cancel-yes-btn">Yes, Cancel Visit</button></div></div></div></div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>

<script>
    $(document).ready(function() {
        const baseUrl = '<?=$baseUrl ?? ''?>';
        const authToken = '<?=$authToken ?? ''?>';
        const caregiverId = <?=$userId ?? 'null'?>;
        const caregiverFullname = '<?=$fullname ?? 'Me'?>';

        const newVisitState = { caregiverId, caregiverFullname, patientId: null, patientFullname: null, addressId: null, address: null, visitDate: null, startTime: null, totalHours: null };

        let allVisits = [], allAssignedPatients = [], allPatientAddresses = [];
        let visitConfirmationModal, assignVisitOffcanvas, actionsModal, cancelConfirmModal;
        let selectedVisitId = null;

        // --- Initialize Modals & Offcanvas ---
        actionsModal = new bootstrap.Modal(document.getElementById('actionsModal'));
        cancelConfirmModal = new bootstrap.Modal(document.getElementById('cancelConfirmModal'));
        visitConfirmationModal = new bootstrap.Modal(document.getElementById('visitConfirmationModal'));
        assignVisitOffcanvas = new bootstrap.Offcanvas(document.getElementById('assignVisitOffcanvas'));
        new Datepicker(document.getElementById('datepicker-container'), { format: 'yyyy-mm-dd', autohide: true, todayHighlight: true });

        // --- HELPERS & RENDER FUNCTIONS ---
        const showAlert = (message, type = 'success') => { $('#alert-container').html(`<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`).delay(4000).fadeOut(); };
        const getFormattedDate = (dateStr, hours) => { const d = new Date(dateStr); return d.toLocaleDateString('en-US', { month: 'long', day: 'numeric' }) + `, ${hours} hrs`; };
        const getRelativeTime = (dateStr) => { const n=new Date(),v=new Date(dateStr);n.setHours(0,0,0,0);v.setHours(0,0,0,0);const d=Math.ceil((v-n)/(1e3*60*60*24));if(d<0)return"Past visit";if(d===0)return"Today";if(d===1)return"Tomorrow";return`In ${d} days`; };
        const getProgressText = (p) => ({ '-1': "Canceled", '0': "Scheduled", '1': "Check-in", '2': "Check-out", '3': "Approved" }[p] || 'Unknown');

        const createTimePicker = (containerId) => {
            const container = $(`#${containerId}`); container.empty();
            const hourSelect = $('<select class="form-select me-2"><option value="">--</option></select>').attr('id', `${containerId}-hour`);
            const minuteSelect = $('<select class="form-select"><option value="">--</option></select>').attr('id', `${containerId}-minute`);
            for (let i = 0; i < 24; i++) hourSelect.append(`<option value="${i}">${String(i).padStart(2,'0')}</option>`);
            for (let i = 0; i < 60; i += 15) minuteSelect.append(`<option value="${i}">${String(i).padStart(2,'0')}</option>`);
            container.append($('<div class="time-picker-wrapper"><label class="form-label me-2">Start Time (Optional):</label></div>').append(hourSelect, ':', minuteSelect));
        };

        const renderVisitList = (visits) => {
            const listContainer = $('#visit-list'); listContainer.empty();
            if (!visits || visits.length === 0) { listContainer.html('<p class="text-center text-muted mt-4">No visits found.</p>'); return; }
            visits.forEach(v => {
                const patientName = `${v.patient.firstname} ${v.patient.lastname}`;
                const patientPhoto = (v.patient.photo && !v.patient.photo.endsWith('default.jpg')) ? (baseUrl + v.patient.photo) : 'https://via.placeholder.com/60';
                const progressText = getProgressText(v.progress);
                const durationHours = v.duration_minutes ? Math.floor(v.duration_minutes / 60) : (v.total_hours || 0);
                listContainer.append(`<div class="visit-card" data-visit-id="${v.id}"><div class="visit-person"><div class="visit-person-avatar"><img src="${patientPhoto}" alt="Patient"></div><div class="visit-person-name">${patientName}</div></div><div class="visit-details"><div class="visit-date">${getFormattedDate(v.start_time, durationHours)}</div><div class="visit-relative-time">${getRelativeTime(v.start_time)}</div><div class="visit-progress ${progressText === 'Canceled' ? 'visit-progress-canceled' : ''}">${progressText}</div></div></div>`);
            });
        };

        const renderSelectionList = (items, containerId, type) => {
            const listContainer = $(`#${containerId}`); listContainer.empty();
            if (!items || items.length === 0) { listContainer.html(`<p class="text-center text-muted mt-3">No ${type}s found.</p>`); return; }
            items.forEach(item => {
                let id = item.id; let name = `${item.firstname || ''} ${item.lastname || ''}`.trim();
                if (type === 'address') name = `${item.address}, ${item.city}, ${item.state} ${item.zipcode}`;
                const photo = (item.photo && !item.photo.endsWith('default.jpg')) ? (baseUrl + item.photo) : null;
                const iconClass = type === 'address' ? (item.type === 'Apartment' ? 'fa-building' : 'fa-house') : 'fa-user';
                listContainer.append(`<div class="selection-item" data-id="${id}" data-name="${name}"><div class="item-avatar">${photo ? `<img src="${photo}" class="rounded-circle w-100 h-100" style="object-fit:cover;" alt="Avatar">` : `<i class="fa-solid ${iconClass} fs-3"></i>`}</div><div>${name}</div></div>`);
            });
        };

        const checkFormCompleteness = () => { if (newVisitState.patientId && newVisitState.addressId && newVisitState.visitDate && newVisitState.totalHours) { $('#create-visit-btn').fadeIn(); } else { $('#create-visit-btn').fadeOut(); } };

        function resetFormState() {
            Object.keys(newVisitState).forEach(k => { if(k !== 'caregiverId' && k !== 'caregiverFullname') newVisitState[k] = null; });
            $('.selection-item.selected').removeClass('selected');
            $('#address-tab-btn').addClass('disabled');
            $('#address-selection-content, #create-visit-btn').hide();
            $('#address-selection-placeholder').show();
            $('#total-hours-select').val('');
            createTimePicker('start-time-picker');
            const dpInstance = Datepicker.getInstance(document.getElementById('datepicker-container'));
            if(dpInstance) { dpInstance.setDate({clear: true}); }
            const patientTabBtn = document.getElementById('patient-tab-btn');
            if(patientTabBtn) { bootstrap.Tab.getOrCreateInstance(patientTabBtn).show(); }
        }

        // --- API CALLS ---
        const fetchMyVisits = () => {
            $('#visit-list').html('<div class="text-center p-5"><div class="spinner-border"></div></div>');
            $.ajax({ url: `${baseUrl}/user/visits/${caregiverId}`, headers: { 'Authorization': authToken },
                success: (res) => { if (res.status === 'success') { allVisits = res.data.visits || []; applyFilters(); } else { allVisits = []; applyFilters(); } },
                error: () => { showAlert('Error fetching visits.', 'danger'); allVisits = []; applyFilters(); }
            });
        };
        const fetchAssignedPatients = () => $.ajax({ url: `${baseUrl}/assigned/patients/${caregiverId}`, headers: { 'Authorization': authToken } });
        const fetchPatientAddresses = (patientId) => $.ajax({ url: `${baseUrl}/address/person/${patientId}/1`, headers: { 'Authorization': authToken } });
        const performVisitAction = (action, visitId) => {
            $.ajax({ url: `${baseUrl}/visit/${visitId}/${action}`, type: 'PUT', headers: { 'Authorization': authToken, 'Content-Type': 'application/json' },
                success: (res) => { showAlert(res.message || `Visit ${action} successful.`, 'success'); fetchMyVisits(); },
                error: (xhr) => showAlert(xhr.responseJSON?.message || `Failed to ${action} visit.`, 'danger')
            });
        };

        // --- FILTERING ---
        function applyFilters() {
            const visitProgress = $('.filter-buttons .filter-btn.active').data('filter-value');
            const searchTerm = $('#search-input-main').val().toLowerCase();
            const filtered = allVisits.filter(v =>
                (visitProgress === 'all' || v.progress == visitProgress) &&
                (searchTerm === '' || `${v.patient.firstname} ${v.patient.lastname}`.toLowerCase().includes(searchTerm))
            );
            renderVisitList(filtered);
        }

        // --- EVENT LISTENERS ---
        $('.filter-btn').on('click', function() { $(this).addClass('active').siblings().removeClass('active'); applyFilters(); });
        $('#main-search-btn, #search-input-main').on('keyup', applyFilters);

        $('#visit-list').on('click', '.visit-card', function(e) {
            e.preventDefault();
            selectedVisitId = $(this).data('visit-id');
            const visit = allVisits.find(v => v.id == selectedVisitId);
            if (!visit) return;
            $('#actions-modal-title').text(`Visit to ${visit.patient.firstname}`);
            const addressString = `${visit.address.address}, ${visit.address.city}, ${visit.address.state}`;
            $('#action-navigate-btn').attr('href', `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(addressString)}`);
            $('#action-detail-btn').attr('href', `/visit/detail/${visit.id}`);
            actionsModal.show();
        });

        $('#action-checkin-btn').on('click', () => { if(selectedVisitId) performVisitAction('checkin', selectedVisitId); actionsModal.hide(); });
        $('#action-checkout-btn').on('click', () => { if(selectedVisitId) performVisitAction('checkout', selectedVisitId); actionsModal.hide(); });

        // Logic for Cancel button is missing in your wireframe, assuming it's replaced by checkin/out

        // --- ADD VISIT OFFCANVAS LISTENERS ---
        $('#add-visit-btn').on('click', (e) => {
            e.preventDefault();
            fetchAssignedPatients().done(res => {
                allAssignedPatients = res.data.patients;
                renderSelectionList(allAssignedPatients, 'patient-selection-list', 'patient');
            });
            assignVisitOffcanvas.show();
        });

        $('#assignVisitOffcanvas').on('hidden.bs.offcanvas', resetFormState);

        $('#patient-search').on('keyup', function() { const s = $(this).val().toLowerCase(); renderSelectionList(allAssignedPatients.filter(p => `${p.firstname} ${p.lastname}`.toLowerCase().includes(s)), 'patient-selection-list', 'patient'); });
        $('#address-search').on('keyup', function() { const s = $(this).val().toLowerCase(); renderSelectionList(allPatientAddresses.filter(a => a.address.toLowerCase().includes(s)), 'address-selection-list', 'address'); });

        $('#patient-selection-list').on('click', '.selection-item', function() { const el=$(this); newVisitState.patientId = el.data('id'); newVisitState.patientFullname = el.data('name'); el.addClass('selected').siblings().removeClass('selected'); bootstrap.Tab.getOrCreateInstance(document.getElementById('address-tab-btn')).show(); checkFormCompleteness(); });
        $('#address-selection-list').on('click', '.selection-item', function() { const el=$(this); newVisitState.addressId = el.data('id'); newVisitState.address = el.data('name'); el.addClass('selected').siblings().removeClass('selected'); bootstrap.Tab.getOrCreateInstance(document.getElementById('date-tab-btn')).show(); checkFormCompleteness(); });

        $(document.getElementById('datepicker-container')).on('changeDate', function(e) { newVisitState.visitDate = e.detail.date; checkFormCompleteness(); });
        $('#start-time-picker').on('change', 'select', function() { const h = $('#start-time-picker-hour').val(), m = $('#start-time-picker-minute').val(); newVisitState.startTime = (h !== "" && m !== "") ? { h: parseInt(h), m: parseInt(m) } : null; });
        $('#total-hours-select').on('change', function() { newVisitState.totalHours = parseInt($(this).val()); checkFormCompleteness(); });

        $('button[data-bs-toggle="tab"]').on('show.bs.tab', function(e) {
            const targetTab = e.target.id;
            if (targetTab === 'address-tab-btn' && !newVisitState.patientId) return false;
            if (targetTab === 'address-tab-btn') { $('#address-selection-content').show(); $('#address-selection-placeholder').hide(); fetchPatientAddresses(newVisitState.patientId).done(res => { allPatientAddresses = res.data; renderSelectionList(allPatientAddresses, 'address-selection-list', 'address'); }); }
        });

        $('#create-visit-btn').on('click', function() {
            const { patientFullname, visitDate, startTime, totalHours } = newVisitState;
            const visitDay = new Date(visitDate).toLocaleDateString('en-US', { month: 'long', day: 'numeric'});
            let timeText = `for ${totalHours} hours.`;
            if (startTime) { const startStr = `${startTime.h % 12 || 12}:${String(startTime.m).padStart(2,'0')} ${startTime.h >= 12 ? 'PM' : 'AM'}`; timeText = `starting around ${startStr} for ${totalHours} hours.` }
            $('#visit-confirmation-text').html(`A visit for <strong>${patientFullname}</strong> will be created on <strong>${visitDay}</strong>, attended by <strong>${caregiverFullname}</strong> ${timeText}`);
            visitConfirmationModal.show();
        });

        $('#confirm-create-visit-btn').on('click', function() {
            const { patientId, addressId, visitDate, startTime, totalHours } = newVisitState;
            const payload = { user_id: caregiverId, patient_id: patientId, address_id: addressId, visit_date: new Date(visitDate).toISOString().slice(0, 10), total_hours: totalHours };
            if (startTime) { const startDatetime = new Date(visitDate); startDatetime.setHours(startTime.h, startTime.m, 0, 0); payload.start_time = startDatetime.toISOString().slice(0, 19).replace('T', ' '); }
            $.ajax({ url: `${baseUrl}/visit/schedule`, type: 'POST', headers: { 'Authorization': authToken, 'Content-Type': 'application/json' }, data: JSON.stringify(payload),
                success: () => { showAlert('Visit created!', 'success'); visitConfirmationModal.hide(); assignVisitOffcanvas.hide(); fetchMyVisits(); },
                error: (xhr) => showAlert(xhr.responseJSON?.message || 'Failed to create visit.', 'danger')
            });
        });

        // --- INITIALIZATION ---
        fetchMyVisits();
    });
</script>

</body>
</html>
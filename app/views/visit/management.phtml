<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?=$pageTitle ?? 'Visits Management'?></title>

    <!-- Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">

    <style>
        html, body { height: 100vh; overflow: hidden; background-color: #f0f2f5; font-family: 'Segoe UI', 'Roboto', sans-serif; }
        .page-container { display: flex; flex-direction: column; height: 100vh; max-width: 500px; margin: 0 auto; background-color: #ffffff; border-left: 1px solid #dcdcdc; border-right: 1px solid #dcdcdc; position: relative; }

        /* Header & Controls */
        .header { display: flex; justify-content: space-between; align-items: center; padding: 1rem; position: relative; flex-shrink: 0; }
        .back-button { text-decoration: none; color: #333; font-weight: 500; }
        .header-title { font-size: 1.8rem; font-weight: bold; margin: 0; position: absolute; left: 50%; transform: translateX(-50%); }
        .profile-icon { font-size: 1.5rem; border: 2px solid #000; border-radius: 50%; width: 45px; height: 45px; display: flex; align-items: center; justify-content: center; margin: 0 auto; overflow: hidden; }
        .profile-icon img { width: 100%; height: 100%; object-fit: cover; }
        .profile-username { font-size: 0.8rem; color: #555; margin-top: 4px; }
        .controls-section { padding: 1rem; background-color: #f8f9fa; border-bottom: 1px solid #e0e0e0; flex-shrink: 0; }
        .search-bar .form-control, .search-bar .btn { border-radius: 8px; border: 2px solid #000; }
        .filter-group { border: 2px solid #000; border-radius: 10px; padding: 0.5rem; }
        .filter-buttons { display: flex; overflow-x: auto; gap: 0.5rem; }
        .filter-buttons::-webkit-scrollbar { display: none; }
        .filter-btn { border: 2px solid #000; border-radius: 8px; background-color: #fff; color: #000; font-weight: 500; white-space: nowrap; }
        .filter-btn.active { background-color: #000; color: #fff; }

        /* Visit List */
        .visit-list-container { flex-grow: 1; overflow-y: auto; padding: 1rem; padding-bottom: 120px; }
        .visit-card { display: grid; grid-template-columns: 1fr auto 1fr; align-items: center; border: 2px solid #000; border-radius: 15px; padding: 1rem; margin-bottom: 1rem; text-decoration: none; color: inherit; transition: background-color 0.2s; }
        .visit-card:hover { background-color: #f1f1f1; }
        .visit-person { text-align: center; }
        .visit-person-avatar { width: 60px; height: 60px; border: 3px solid #000; border-radius: 50%; overflow: hidden; margin: 0 auto 0.5rem; display:flex; align-items:center; justify-content:center; }
        .visit-person-avatar img { width: 100%; height: 100%; object-fit: cover; }
        .visit-person-name { font-weight: 500; }
        .visit-details { text-align: center; }
        .visit-date { font-weight: bold; font-size: 1.1rem; }
        .visit-progress-canceled { color: #dc3545; font-weight: bold; }

        /* FAB & Offcanvas */
        .fab { position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); width: 90px; height: 90px; border-radius: 50%; background-color: #e0e0e0; border: 3px solid #000; display: flex; flex-direction: column; align-items: center; justify-content: center; font-weight: 500; text-decoration: none; color: #000; z-index: 1040; }
        .offcanvas-body { display: flex; flex-direction: column; }
        .nav-tabs .nav-link { border: 2px solid #000 !important; border-bottom: 0 !important; color: #000; margin-right: 2px; }
        .nav-tabs .nav-link.active { background-color: #0d6efd; color: #fff; border-color: #0d6efd !important;}
        .nav-tabs .nav-link.disabled { color: #aaa; border-color: #aaa !important; background-color: #f8f9fa; }
        .tab-pane { padding-top: 1rem; display: flex; flex-direction: column; flex-grow: 1; }
        .selection-list { flex-grow: 1; overflow-y: auto; margin-top: 1rem; padding-bottom: 1rem; }
        .selection-item { display: flex; align-items: center; gap: 1rem; border: 2px solid #ccc; border-radius: 15px; padding: 0.75rem; margin-bottom: 0.5rem; cursor: pointer; }
        .selection-item.selected { border-color: #0d6efd; background-color: #eef5ff; }
        .item-avatar { width: 45px; height: 45px; }
        #create-visit-btn { border: 2px solid #000; font-weight: bold; margin: 20px 0; }

        #alert-container { position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index: 2000; width: 90%; max-width: 480px; }
    </style>
</head>
<body>

<div id="alert-container"></div>

<div class="page-container">
    <header class="header">
        <a href="/dashboard/admin" class="back-button"><i class="fas fa-chevron-left"></i> Exit</a>
        <h1 class="header-title">Visits</h1>
        <div class="profile"><div class="profile-icon"><img src="<?=$photo?>" alt="avatar"></div><span class="profile-username"><?=$fullname?></span></div>
    </header>

    <section class="controls-section">
        <div class="input-group search-bar mb-3"><input type="text" id="search-input-main" class="form-control" placeholder="Search by name..."><button class="btn btn-dark" type="button" id="main-search-btn">Search</button></div>
        <div class="filter-group mb-2"><div class="filter-buttons" id="recordStatus-filters"><small class="align-self-center me-2">Status:</small><button class="btn filter-btn active" data-filter-value="all">All</button><button class="btn filter-btn" data-filter-value="1">Visible</button><button class="btn filter-btn" data-filter-value="2">Archived</button><button class="btn filter-btn" data-filter-value="3">Deleted</button></div></div>
        <div class="filter-group"><div class="filter-buttons" id="visitProgress-filters"><small class="align-self-center me-2">Progress:</small><button class="btn filter-btn active" data-filter-value="all">All</button><button class="btn filter-btn" data-filter-value="0">Scheduled</button><button class="btn filter-btn" data-filter-value="1">Check-in</button><button class="btn filter-btn" data-filter-value="2">Check-out</button><button class="btn filter-btn" data-filter-value="3">Approved</button><button class="btn filter-btn" data-filter-value="-1">Canceled</button></div></div>
    </section>

    <main class="visit-list-container"><div id="visit-list"><div class="text-center p-5"><div class="spinner-border"></div></div></div></main>
</div>
<a href="#" class="fab" id="add-visit-btn"><div>+</div><div>Visit</div></a>

<!-- Offcanvas for Add Visit Form -->
<div class="offcanvas offcanvas-bottom h-100" tabindex="-1" id="assignVisitOffcanvas">
    <div class="offcanvas-header"><h5 class="offcanvas-title w-100 text-center">Schedule Visit</h5><button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button></div>
    <div class="offcanvas-body">
        <ul class="nav nav-tabs" id="visit-tabs" role="tablist">
            <li class="nav-item"><button class="nav-link active" id="caregiver-tab-btn" data-bs-toggle="tab" data-bs-target="#caregiver-tab">Caregiver</button></li>
            <li class="nav-item"><button class="nav-link disabled" id="patient-tab-btn" data-bs-toggle="tab" data-bs-target="#patient-tab">Patient</button></li>
            <li class="nav-item"><button class="nav-link disabled" id="address-tab-btn" data-bs-toggle="tab" data-bs-target="#address-tab">Address</button></li>
            <li class="nav-item"><button class="nav-link disabled" id="date-tab-btn" data-bs-toggle="tab" data-bs-target="#date-tab">Date</button></li>
            <li class="nav-item"><button class="nav-link disabled" id="start-tab-btn" data-bs-toggle="tab" data-bs-target="#start-tab">Start</button></li>
            <li class="nav-item"><button class="nav-link disabled" id="duration-tab-btn" data-bs-toggle="tab" data-bs-target="#duration-tab">Duration</button></li>
        </ul>
        <div class="tab-content flex-grow-1" id="visit-tabs-content">
            <div class="tab-pane fade show active" id="caregiver-tab"><div class="input-group search-bar"><input type="text" id="caregiver-search" class="form-control" placeholder="Search caregivers..."></div><div class="selection-list" id="caregiver-selection-list"></div></div>
            <div class="tab-pane fade" id="patient-tab"><div class="text-center text-muted mt-5" id="patient-placeholder">Please select a caregiver.</div><div id="patient-content" style="display:none;"><div class="input-group search-bar"><input type="text" id="patient-search" class="form-control" placeholder="Search patients..."></div><div class="selection-list" id="patient-selection-list"></div></div></div>
            <div class="tab-pane fade" id="address-tab"><div class="text-center text-muted mt-5" id="address-placeholder">Please select a patient.</div><div id="address-content" style="display:none;"><div class="input-group search-bar"><input type="text" id="address-search" class="form-control" placeholder="Search addresses..."></div><div class="selection-list" id="address-selection-list"></div></div></div>
            <div class="tab-pane fade" id="date-tab"><div id="datepicker-container" class="pt-3"></div></div>
            <div class="tab-pane fade d-flex justify-content-center align-items-center" id="start-tab"><div id="start-time-picker"></div></div>
            <div class="tab-pane fade d-flex justify-content-center align-items-center" id="duration-tab"><div class="w-75"><label for="total-hours-select" class="form-label fs-5 text-center w-100">Select Total Hours</label><select class="form-select form-select-lg" id="total-hours-select"><option selected disabled value="">Choose duration...</option><script>for(let i=1;i<=12;i++){document.write(`<option value="${i}">${i} Hour${i>1?'s':''}</option>`)}</script></select></div></div>
        </div>
        <button type="button" class="btn btn-primary" id="create-visit-btn" style="display:none;">Create Visit</button>
    </div>
</div>

<div class="modal fade" id="visitConfirmationModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Confirm Visit</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body" id="visit-confirmation-text"></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="button" class="btn btn-primary" id="confirm-create-visit-btn">OK</button></div></div></div></div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>

<script>
    $(document).ready(function() {
        const VisitsManagementApp = {
            state: {
                baseUrl: <?= json_encode($baseUrl ?? '') ?>,
                authToken: <?= json_encode($authToken ?? '') ?>,
                allVisits: [],
                allCaregivers: [],
                allAssignedPatients: [],
                allPatientAddresses: [],
                newVisit: {},
            },

            elements: {
                alertContainer: $('#alert-container'), visitList: $('#visit-list'), mainSearchInput: $('#search-input-main'),
                mainSearchBtn: $('#main-search-btn'), addVisitBtn: $('#add-visit-btn'), createVisitBtn: $('#create-visit-btn'),
                caregiverSearch: $('#caregiver-search'), patientSearch: $('#patient-search'), addressSearch: $('#address-search'),
                caregiverList: $('#caregiver-selection-list'), patientList: $('#patient-selection-list'), addressList: $('#address-selection-list'),
                timePicker: $('#start-time-picker'), hoursSelect: $('#total-hours-select'),
                visitConfirmationText: $('#visit-confirmation-text'), confirmCreateVisitBtn: $('#confirm-create-visit-btn'),
                tabs: {
                    caregiver: bootstrap.Tab.getOrCreateInstance('#caregiver-tab-btn'), patient: bootstrap.Tab.getOrCreateInstance('#patient-tab-btn'),
                    address: bootstrap.Tab.getOrCreateInstance('#address-tab-btn'), date: bootstrap.Tab.getOrCreateInstance('#date-tab-btn'),
                    start: bootstrap.Tab.getOrCreateInstance('#start-tab-btn'), duration: bootstrap.Tab.getOrCreateInstance('#duration-tab-btn'),
                }
            },

            modals: { offcanvas: null, confirmation: null, datepicker: null },

            init() {
                this.modals.offcanvas = new bootstrap.Offcanvas('#assignVisitOffcanvas');
                this.modals.confirmation = new bootstrap.Modal('#visitConfirmationModal');
                this.modals.datepicker = new Datepicker(document.getElementById('datepicker-container'), { format: 'yyyy-mm-dd', autohide: true, todayHighlight: true });

                this.bindEvents();
                this.render.timePicker();
                this.api.fetchAllVisits();
                this.resetFormState();
            },

            bindEvents() {
                const h = this.handlers;
                const debouncedFilter = this.helpers.debounce(h.applyFilters.bind(this), 300);

                $('#recordStatus-filters').on('click', '.filter-btn', h.onFilterClick.bind(this));
                $('#visitProgress-filters').on('click', '.filter-btn', h.onFilterClick.bind(this));
                this.elements.mainSearchInput.on('keyup', debouncedFilter);
                this.elements.mainSearchBtn.on('click', h.applyFilters.bind(this));

                this.elements.addVisitBtn.on('click', h.onAddVisitClick.bind(this));
                $('#assignVisitOffcanvas').on('hidden.bs.offcanvas', () => this.resetFormState());

                this.elements.caregiverList.on('click', '.selection-item', e => h.onSelectItem.call(this, e, 'caregiver'));
                this.elements.patientList.on('click', '.selection-item', e => h.onSelectItem.call(this, e, 'patient'));
                this.elements.addressList.on('click', '.selection-item', e => h.onSelectItem.call(this, e, 'address'));

                this.elements.caregiverSearch.on('keyup', this.helpers.debounce(e => h.onSubSearch.call(this, e, 'caregiver'), 300));
                this.elements.patientSearch.on('keyup', this.helpers.debounce(e => h.onSubSearch.call(this, e, 'patient'), 300));
                this.elements.addressSearch.on('keyup', this.helpers.debounce(e => h.onSubSearch.call(this, e, 'address'), 300));

                $('#visit-tabs').on('show.bs.tab', h.onTabChange.bind(this));
                $(document.getElementById('datepicker-container')).on('changeDate', h.onDateChange.bind(this));
                this.elements.timePicker.on('change', 'select', h.onTimeChange.bind(this));
                this.elements.hoursSelect.on('change', h.onDurationChange.bind(this));
                this.elements.createVisitBtn.on('click', h.onCreateVisitClick.bind(this));
                this.elements.confirmCreateVisitBtn.on('click', h.onConfirmCreateVisit.bind(this));

                window.addEventListener('pageshow', e => { if(e.persisted) this.api.fetchAllVisits(); });
            },

            handlers: {
                applyFilters() {
                    const status = $('#recordStatus-filters .active').data('filter-value');
                    const progress = $('#visitProgress-filters .active').data('filter-value');
                    const term = this.elements.mainSearchInput.val().toLowerCase();
                    const filtered = this.state.allVisits.filter(v =>
                        (status === 'all' || v.status == status) &&
                        (progress === 'all' || v.progress == progress) &&
                        (!term || `${v.user.firstname} ${v.user.lastname}`.toLowerCase().includes(term) || `${v.patient.firstname} ${v.patient.lastname}`.toLowerCase().includes(term))
                    );
                    this.render.visitList(filtered);
                },
                onFilterClick(e) {
                    const button = $(e.currentTarget);
                    button.addClass('active').siblings().removeClass('active');
                    this.handlers.applyFilters.call(this);
                },
                onAddVisitClick() { this.api.fetchCaregivers().done(res => { this.state.allCaregivers = res.data.users; this.render.selectionList('caregiver', res.data.users); }); this.modals.offcanvas.show(); },
                onSelectItem(e, type) {
                    const el = $(e.currentTarget);
                    el.addClass('selected').siblings().removeClass('selected');
                    this.state.newVisit[`${type}Id`] = el.data('id');
                    this.state.newVisit[`${type}Fullname`] = el.data('name');

                    if (type === 'caregiver') $('#patient-tab-btn').removeClass('disabled');
                    if (type === 'patient') $('#address-tab-btn').removeClass('disabled');
                    if (type === 'address') $('#date-tab-btn').removeClass('disabled');

                    const nextTab = { caregiver: 'patient', patient: 'address', address: 'date' }[type];
                    if (nextTab) this.elements.tabs[nextTab].show();
                    this.checkFormCompleteness();
                },
                onTabChange(e) {
                    const tabId = e.target.id;
                    if (tabId === 'patient-tab-btn' && this.state.newVisit.caregiverId) {
                        $('#patient-content').show(); $('#patient-placeholder').hide();
                        this.api.fetchAssignedPatients().done(res => { this.state.allAssignedPatients = res.data.patients; this.render.selectionList('patient', res.data.patients); });
                    }
                    if (tabId === 'address-tab-btn' && this.state.newVisit.patientId) {
                        $('#address-content').show(); $('#address-placeholder').hide();
                        this.api.fetchPatientAddresses().done(res => { this.state.allPatientAddresses = res.data; this.render.selectionList('address', res.data); });
                    }
                },
                onDateChange(e) { this.state.newVisit.visitDate = e.detail.date; $('#start-tab-btn').removeClass('disabled'); this.checkFormCompleteness(); },
                onTimeChange() {
                    const h = $('#start-time-picker-hour').val(), m = $('#start-time-picker-minute').val();
                    this.state.newVisit.startTime = (h && m) ? {h:parseInt(h), m:parseInt(m)} : null;
                    $('#duration-tab-btn').removeClass('disabled'); this.checkFormCompleteness();
                },
                onDurationChange(e) { this.state.newVisit.totalHours = parseInt($(e.target).val()); this.checkFormCompleteness(); },
                onCreateVisitClick() { this.render.confirmationText(); this.modals.confirmation.show(); },
                onConfirmCreateVisit() { this.api.createVisit(); },
                onSubSearch(e, type) {
                    const term = $(e.target).val().toLowerCase();
                    const list = `all${type.charAt(0).toUpperCase() + type.slice(1)}s`;
                    const key = type === 'address' ? 'address' : ['firstname', 'lastname'];
                    const filtered = this.state[list].filter(item => this.helpers.searchMatcher(item, term, key));
                    this.render.selectionList(type, filtered);
                },
            },

            api: {
                _ajax: settings => $.ajax({ ...settings, headers: {'Authorization': VisitsManagementApp.state.authToken} }).fail(err => VisitsManagementApp.helpers.showAlert(err.responseJSON?.message || 'API request failed.', 'danger')),
                fetchAllVisits() { this.elements.visitList.html('<div class="text-center p-5"><div class="spinner-border"></div></div>'); this._ajax({url:`${this.state.baseUrl}/visits`}).done(res => { this.state.allVisits = res.data.visits; this.handlers.applyFilters.call(this); }); },
                fetchCaregivers: () => VisitsManagementApp.api._ajax({ url: `${VisitsManagementApp.state.baseUrl}/accounts` }),
                fetchAssignedPatients: () => VisitsManagementApp.api._ajax({ url: `${VisitsManagementApp.state.baseUrl}/assigned/patients/${VisitsManagementApp.state.newVisit.caregiverId}` }),
                fetchPatientAddresses: () => VisitsManagementApp.api._ajax({ url: `${VisitsManagementApp.state.baseUrl}/address/person/${VisitsManagementApp.state.newVisit.patientId}/1` }),
                createVisit() {
                    const { caregiverId, patientId, addressId, visitDate, startTime, totalHours } = this.state.newVisit;
                    const payload = { user_id: caregiverId, patient_id: patientId, address_id: addressId, visit_date: new Date(visitDate).toISOString().slice(0, 10), total_hours: totalHours };
                    if(startTime){ const dt=new Date(visitDate); dt.setHours(startTime.h,startTime.m,0,0); payload.start_time = dt.toISOString().slice(0,19).replace('T',' '); }
                    this._ajax({ url:`${this.state.baseUrl}/visit`, type:'POST', contentType:'application/json', data: JSON.stringify(payload)})
                        .done(() => { this.helpers.showAlert('Visit created successfully!','success'); this.modals.confirmation.hide(); this.modals.offcanvas.hide(); this.api.fetchAllVisits(); });
                }
            },

            render: {
                visitList(visits) {
                    const container = this.elements.visitList.empty();
                    if (!visits?.length) { container.html('<p class="text-center text-muted mt-4">No visits found.</p>'); return; }
                    visits.forEach(v => container.append(this.helpers.getVisitCardHTML(v)));
                },
                selectionList(type, items) {
                    const container = this.elements[`${type}List`].empty();
                    if(!items?.length){ container.html(`<p class="text-center text-muted mt-3">No ${type}s found.</p>`); return; }
                    items.forEach(item => container.append(this.helpers.getSelectionItemHTML(type, item)));
                },
                timePicker() { this.elements.timePicker.html(`<label class="form-label me-2">Start:</label><select id="start-time-picker-hour" class="form-select me-2"><option value="">--</option>${Array.from({length:24},(v,k)=>`<option value="${k}">${String(k).padStart(2,'0')}</option>`).join('')}</select>:<select id="start-time-picker-minute" class="form-select"><option value="">--</option>${Array.from({length:4},(v,k)=>`<option value="${k*15}">${String(k*15).padStart(2,'0')}</option>`).join('')}</select>`).addClass('time-picker-wrapper'); },
                confirmationText() {
                    const { patientFullname, caregiverFullname, visitDate, startTime, totalHours } = this.state.newVisit;
                    const d = new Date(visitDate).toLocaleDateString('en-US',{month:'long',day:'numeric'});
                    let t = `for ${totalHours} hours.`;
                    if (startTime) { const s=`${startTime.h%12||12}:${String(startTime.m).padStart(2,'0')} ${startTime.h>=12?'PM':'AM'}`; t=`starting ~${s} ${t}` }
                    this.elements.visitConfirmationText.html(`Create a visit for <strong>${patientFullname}</strong> on <strong>${d}</strong>, with <strong>${caregiverFullname}</strong>, ${t}`);
                }
            },

            helpers: {
                getVisitCardHTML(v) {
                    const cgName=`${v.user.firstname} ${v.user.lastname}`, ptName=`${v.patient.firstname} ${v.patient.lastname}`;
                    const prog = this.getProgressText(v.progress);
                    return `<a href="/visit/detail/${v.id}" class="visit-card">
                        <div class="visit-person"><div class="visit-person-avatar"><img src="${this.baseUrl}${v.user.photo}" alt="CG"></div><div class="visit-person-name">${cgName}</div></div>
                        <div class="visit-details"><div class="visit-date">${this.getFormattedDate(v.start_time)}</div><div>${this.getRelativeTime(v.start_time)}</div><div class="visit-progress ${prog==='Canceled'?'visit-progress-canceled':''}">${prog}</div></div>
                        <div class="visit-person"><div class="visit-person-avatar"><img src="${this.baseUrl}${v.patient.photo}" alt="PT"></div><div class="visit-person-name">${ptName}</div></div></a>`;
                },
                getSelectionItemHTML(type, item) {
                    let id, name, photo, icon = 'fa-user';
                    if (type === 'address') { id=item.id; name=`${item.address}, ${item.city}`; photo=null; icon = item.type==='Apartment'?'fa-building':'fa-house';}
                    else { id=item.id; name=`${item.firstname} ${item.lastname}`; photo=this.baseUrl + item.photo;}
                    return `<div class="selection-item" data-id="${id}" data-name="${name}"><div class="item-avatar">${photo ? `<img src="${photo}" class="rounded-circle w-100 h-100" style="object-fit:cover;">` : `<i class="fa-solid ${icon} fs-3"></i>`}</div><div>${name}</div></div>`;
                },
                showAlert: (m,t='success')=>VisitsManagementApp.elements.alertContainer.html(`<div class="alert alert-${t} a-d fade show" role="alert">${m}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`).children().delay(4000).fadeOut(),
                getProgressText: p => ({'-1':"Canceled",'0':"Scheduled",'1':"Check-in",'2':"Check-out",'3':"Approved"}[p]||'Unknown'),
                getFormattedDate: d=>new Date(d).toLocaleString('en-US',{month:'short',day:'numeric',hour:'numeric',minute:'2-digit',hour12:true}),
                getRelativeTime: dStr=>{const n=new Date(),v=new Date(dStr);n.setHours(0,0,0,0);v.setHours(0,0,0,0);const d=Math.ceil((v-n)/864e5);if(d<0)return"Past";if(d===0)return"Today";if(d===1)return"Tomorrow";return`In ${d} days`},
                searchMatcher: (item,term,keys)=>{ if(!term) return true; const fields = Array.isArray(keys) ? keys.map(k=>item[k]||'').join(' ') : item[keys]; return fields.toLowerCase().includes(term); },
                debounce: (func,delay)=>{ let t; return function(...a){clearTimeout(t); t=setTimeout(()=>func.apply(this,a),delay);}},
            },

            checkFormCompleteness() {
                const s = this.state.newVisit;
                if (s.caregiverId && s.patientId && s.addressId && s.visitDate && s.startTime && s.totalHours) {
                    this.elements.createVisitBtn.fadeIn();
                } else {
                    this.elements.createVisitBtn.fadeOut();
                }
            },

            resetFormState() {
                this.state.newVisit = { caregiverId:null, patientId:null, addressId:null, visitDate:null, startTime:null, totalHours:null, caregiverFullname:null, patientFullname:null };
                $('.selection-item.selected').removeClass('selected');
                $('#patient-tab-btn, #address-tab-btn, #date-tab-btn, #start-tab-btn, #duration-tab-btn').addClass('disabled');
                $('#patient-content, #address-content, #create-visit-btn').hide();
                $('#patient-placeholder, #address-placeholder').show();
                this.elements.hoursSelect.val('');
                if(this.modals.datepicker) this.modals.datepicker.setDate({clear:true});
                this.elements.tabs.caregiver.show();
            }
        };

        // Attach helper contexts for easier access in map functions
        VisitsManagementApp.helpers.getVisitCardHTML = VisitsManagementApp.helpers.getVisitCardHTML.bind(VisitsManagementApp.helpers);
        VisitsManagementApp.helpers.getSelectionItemHTML = VisitsManagementApp.helpers.getSelectionItemHTML.bind({baseUrl:VisitsManagementApp.state.baseUrl});

        VisitsManagementApp.init();
    });
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?=$pageTitle ?? 'Caregiver Management'?></title>

    <!-- Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

    <style>
        html, body { height: 100vh; overflow: hidden; background-color: #f0f2f5; font-family: 'Segoe UI', 'Roboto', sans-serif; }
        .page-container { display: flex; flex-direction: column; height: 100vh; max-width: 500px; margin: 0 auto; background-color: #ffffff; border-left: 1px solid #dcdcdc; border-right: 1px solid #dcdcdc; position: relative; }

        /* Header & Controls */
        .header { display: flex; justify-content: space-between; align-items: center; padding: 1rem; position: relative; flex-shrink: 0; }
        .back-button { text-decoration: none; color: #333; font-weight: 500; }
        .header-title { font-size: 1.8rem; font-weight: bold; margin: 0; position: absolute; left: 50%; transform: translateX(-50%); }
        .header-subtitle { position: absolute; left: 50%; transform: translateX(-50%); top: 4.5rem; font-size: 1.5rem; color: #555; }
        .profile-icon { font-size: 1.5rem; border: 2px solid #000; border-radius: 50%; width: 45px; height: 45px; display: flex; align-items: center; justify-content: center; margin: 0 auto; overflow: hidden; }
        .profile-icon img { width: 100%; height: 100%; object-fit: cover; }
        .profile-username { font-size: 0.8rem; color: #555; margin-top: 4px; }

        .controls-section { padding: 1rem; background-color: #f8f9fa; border-bottom: 1px solid #e0e0e0; flex-shrink: 0; }
        .search-bar .form-control, .search-bar .btn { border-radius: 8px; border: 2px solid #000; }
        .filter-buttons { display: flex; overflow-x: auto; padding-top: 1rem; gap: 0.5rem; }
        .filter-buttons::-webkit-scrollbar { display: none; }
        .filter-btn { border: 2px solid #000; border-radius: 8px; background-color: #fff; color: #000; font-weight: 500; white-space: nowrap; }
        .filter-btn.active { background-color: #000; color: #fff; }

        /* User List */
        .user-list-container { flex-grow: 1; overflow-y: auto; padding: 1rem; padding-bottom: 120px; }
        .user-item { display: grid; grid-template-columns: auto 1fr; gap: 1rem; border: 2px solid #000; border-radius: 15px; padding: 1rem; margin-bottom: 1rem; cursor: pointer; transition: background-color 0.2s; text-decoration: none; color: inherit; }
        .user-item:hover { background-color: #f1f1f1; }
        .user-avatar { grid-row: 1 / 3; width: 60px; height: 60px; border-radius: 50%; border: 3px solid #000; overflow: hidden; }
        .user-avatar img { width: 100%; height: 100%; object-fit: cover; }
        .user-name { font-weight: bold; font-size: 1.1rem; }
        .user-phone { color: #555; }
        .user-status { font-weight: bold; }
        .status-active { color: #198754; } .status-inactive { color: #dc3545; }
        .status-not-verified { color: #fd7e14; } .status-archived { color: #6f42c1; } .status-deleted { color: #6c757d; }

        /* FAB & Offcanvas */
        .fab { position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); width: 90px; height: 90px; border-radius: 50%; background-color: #e0e0e0; border: 3px solid #000; display: flex; flex-direction: column; align-items: center; justify-content: center; font-weight: 500; text-decoration: none; color: #000; box-shadow: 0 4px 8px rgba(0,0,0,0.2); z-index: 1040; }
        .fab .plus-icon { font-size: 2rem; line-height: 1; }
        .fab .plus-text { font-size: 0.8rem; margin-top: 4px; }
        .offcanvas-header { border-bottom: 1px solid #dee2e6; }
        #resultModal .modal-footer { border-top: 0; }
        #resultModal .close-btn { background: #000; color: #fff; border-radius: 50%; width: 50px; height: 50px; border: 0; }
        #alert-container { position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index: 2000; width: 90%; max-width: 480px; }
    </style>
</head>
<body>

<div id="alert-container"></div>

<div class="page-container">
    <header class="header">
        <a href="/dashboard/admin" class="back-button"><i class="fas fa-chevron-left"></i> Back</a>
        <h1 class="header-title">Management</h1>
        <h2 class="header-subtitle">Caregivers</h2>
        <div class="profile">
            <div class="profile-icon"><img src="<?=$photo?>" alt="avatar"></div>
            <span class="profile-username"><?=$fullname?></span>
        </div>
    </header>

    <section class="controls-section">
        <div class="input-group search-bar">
            <input type="text" id="search-input" class="form-control" placeholder="Search caregiver...">
            <button class="btn btn-dark" type="button" id="search-button">Search</button>
        </div>
        <div class="filter-buttons">
            <button class="btn filter-btn active" data-filter-status="all">All</button>
            <button class="btn filter-btn" data-filter-status="-1">Not Verified</button>
            <button class="btn filter-btn" data-filter-status="1">Active</button>
            <button class="btn filter-btn" data-filter-status="0">Inactive</button>
            <button class="btn filter-btn" data-filter-status="2">Archived</button>
            <button class="btn filter-btn" data-filter-status="3">Deleted</button>
        </div>
    </section>

    <main class="user-list-container">
        <div id="user-list"><div class="text-center p-5"><div class="spinner-border"></div></div></div>
    </main>
</div>

<a href="#" class="fab" id="add-caregiver-btn">
    <div class="plus-icon">+</div>
    <div class="plus-text">Caregiver</div>
</a>

<div class="offcanvas offcanvas-bottom" tabindex="-1" id="addCaregiverOffcanvas" style="height: auto;">
    <div class="offcanvas-header"><h5 class="offcanvas-title w-100 text-center">Add Caregiver</h5><button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas"></button></div>
    <div class="offcanvas-body">
        <form id="add-caregiver-form" class="mx-auto" style="max-width: 400px;">
            <div class="input-group mb-3"><span class="input-group-text"><i class="fa-solid fa-user"></i></span><input type="text" class="form-control" id="form-username" placeholder="Username" required></div>
            <div class="input-group mb-3"><span class="input-group-text"><i class="fa-solid fa-lock"></i></span><input type="password" class="form-control" id="form-password" placeholder="Password" required></div>
            <div class="input-group mb-4"><span class="input-group-text"><i class="fa-solid fa-lock"></i></span><input type="password" class="form-control" id="form-confirm-password" placeholder="Confirm Password" required></div>
            <button type="submit" class="btn w-100" style="border: 2px solid #000; font-weight: 500;">Add Caregiver</button>
        </form>
    </div>
</div>

<div class="modal fade" id="resultModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content" style="border-radius: 15px;"><div class="modal-header"><h5 class="modal-title w-100 text-center">Message</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body text-center fs-5 py-4" id="result-modal-message"></div><div class="modal-footer justify-content-center"><button type="button" class="close-btn" data-bs-dismiss="modal"><i class="fa-solid fa-xmark fs-4"></i></button></div></div></div></div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function() {
        /**
         * Encapsulates all functionality for the Caregiver Management page.
         */
        const ManagementApp = {
            state: {
                adminId: <?= json_encode($userId ?? null) ?>,
                baseUrl: <?= json_encode($baseUrl ?? '') ?>,
                authToken: <?= json_encode($authToken ?? '') ?>,
                allUsers: [],
            },

            elements: {
                alertContainer: $('#alert-container'),
                userList: $('#user-list'),
                searchInput: $('#search-input'),
                searchButton: $('#search-button'),
                filterButtons: $('.filter-btn'),
                addCaregiverBtn: $('#add-caregiver-btn'),
                addCaregiverForm: $('#add-caregiver-form'),
                resultModalMessage: $('#result-modal-message'),
            },

            modals: {
                addCaregiver: null,
                result: null,
            },

            init() {
                this.modals.addCaregiver = new bootstrap.Offcanvas(document.getElementById('addCaregiverOffcanvas'));
                this.modals.result = new bootstrap.Modal(document.getElementById('resultModal'));
                this.bindEvents();
                this.api.fetchUserList();
            },

            bindEvents() {
                this.elements.filterButtons.on('click', this.handlers.onFilterClick);
                const debouncedSearch = this.helpers.debounce(this.handlers.applyFilters, 300);
                this.elements.searchInput.on('keyup', debouncedSearch);
                this.elements.searchButton.on('click', this.handlers.applyFilters);
                this.elements.addCaregiverBtn.on('click', e => { e.preventDefault(); this.modals.addCaregiver.show(); });
                this.elements.addCaregiverForm.on('submit', this.handlers.onRegisterSubmit);

                // Re-fetch data if page is loaded from browser's back-forward cache
                window.addEventListener('pageshow', (event) => {
                    if (event.persisted) this.api.fetchUserList();
                });
            },

            handlers: {
                applyFilters() {
                    const searchTerm = ManagementApp.elements.searchInput.val().toLowerCase();
                    const activeStatus = ManagementApp.elements.filterButtons.filter('.active').data('filter-status').toString();

                    const filteredUsers = ManagementApp.state.allUsers.filter(user => {
                        const statusMatch = (activeStatus === 'all' || user.status.toString() === activeStatus);
                        const fullName = `${user.firstname || ''} ${user.lastname || ''}`.toLowerCase();
                        const searchMatch = !searchTerm || fullName.includes(searchTerm);
                        return statusMatch && searchMatch;
                    });

                    ManagementApp.render.userList(filteredUsers);
                },

                onFilterClick(e) {
                    ManagementApp.elements.filterButtons.removeClass('active');
                    $(e.currentTarget).addClass('active');
                    ManagementApp.handlers.applyFilters();
                },

                onRegisterSubmit(e) {
                    e.preventDefault();
                    const username = $('#form-username').val();
                    const password = $('#form-password').val();
                    const confirmPassword = $('#form-confirm-password').val();

                    if (password !== confirmPassword) {
                        ManagementApp.helpers.showAlert('Passwords do not match.', 'danger');
                        return;
                    }
                    ManagementApp.api.registerUser(username, password);
                }
            },

            api: {
                _ajax(settings) {
                    return $.ajax({
                        ...settings,
                        headers: { 'Authorization': ManagementApp.state.authToken },
                        dataType: 'json'
                    }).fail(err => {
                        const errorMsg = err.responseJSON?.message || 'An API error occurred.';
                        ManagementApp.helpers.showAlert(errorMsg, 'danger');
                    });
                },

                fetchUserList() {
                    ManagementApp.elements.userList.html('<div class="text-center p-5"><div class="spinner-border"></div></div>');
                    this._ajax({ url: `${ManagementApp.state.baseUrl}/accounts` })
                        .done(res => {
                            if (res.status === 'success' && res.data?.users) {
                                ManagementApp.state.allUsers = res.data.users;
                                ManagementApp.handlers.applyFilters(); // Apply default filters on load
                            } else {
                                ManagementApp.elements.userList.html('<p class="text-center text-muted">No users found.</p>');
                            }
                        });
                },

                registerUser(username, password) {
                    this._ajax({
                        url: `${ManagementApp.state.baseUrl}/auth/register`,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ username, password })
                    }).done(response => {
                        ManagementApp.helpers.showResultModal('Caregiver added successfully!', 'success');
                        ManagementApp.modals.addCaregiver.hide();
                        ManagementApp.elements.addCaregiverForm[0].reset();
                        this.fetchUserList();
                    }).fail(err => {
                        const errorMsg = err.responseJSON?.message || 'Unknown error.';
                        ManagementApp.helpers.showResultModal(`Failed to add caregiver: ${errorMsg}`, 'danger');
                    });
                }
            },

            render: {
                userList(users) {
                    const { userList } = ManagementApp.elements;
                    if (!users || users.length === 0) {
                        userList.html('<p class="text-center text-muted mt-4">No matching users found.</p>');
                        return;
                    }

                    const userItemsHTML = users.map(user => {
                        const h = ManagementApp.helpers;
                        const fullName = `${user.firstname || ''} ${user.lastname || ''}`.trim() || 'Unnamed User';
                        const status = h.getStatusInfo(user.status);
                        const photoSrc = user.photo ? `${ManagementApp.state.baseUrl}${user.photo}` : 'https://via.placeholder.com/60';

                        return `
                            <a href="/caregiver/profile/${user.id}" class="user-item">
                                <div class="user-avatar"><img src="${photoSrc}" alt="Avatar"></div>
                                <div class="user-name">${fullName}</div>
                                <div class="user-phone">${user.phone || 'No phone provided'}</div>
                                <div class="user-status ${status.class}">${status.text}</div>
                            </a>`;
                    }).join('');

                    userList.html(userItemsHTML);
                }
            },

            helpers: {
                showAlert(message, type = 'success') {
                    const alertHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`;
                    ManagementApp.elements.alertContainer.html(alertHTML).children().delay(4000).fadeOut();
                },

                showResultModal(message, type = 'success') {
                    ManagementApp.elements.resultModalMessage.text(message)
                        .removeClass('text-danger text-success')
                        .addClass(type === 'success' ? 'text-success' : 'text-danger');
                    ManagementApp.modals.result.show();
                },

                getStatusInfo: status => ({
                    '-1': { text: "Not Verified", class: "status-not-verified" },
                    '0':  { text: "Inactive", class: "status-inactive" },
                    '1':  { text: "Active", class: "status-active" },
                    '2':  { text: "Archived", class: "status-archived" },
                    '3':  { text: "Deleted", class: "status-deleted" }
                })[status] || { text: 'Unknown', class: '' },

                debounce(func, delay) {
                    let timeout;
                    return function(...args) {
                        clearTimeout(timeout);
                        timeout = setTimeout(() => func.apply(this, args), delay);
                    };
                }
            }
        };

        ManagementApp.init();
    });
</script>
</body>
</html>
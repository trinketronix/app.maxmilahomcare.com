<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?=$pageTitle ?? 'User Profile'?></title>

    <link rel="apple-touch-icon" sizes="180x180" href="../../img/fav/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../img/fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../img/fav/favicon-16x16.png">
    <link rel="manifest" href="../../site.webmanifest">
    <link rel="shortcut icon" href="../../img/fav/favicon.ico">

    <!-- Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

    <style>
        body { background-color: #f0f2f5; font-family: 'Segoe UI', 'Roboto', sans-serif; }
        .page-container { max-width: 500px; margin: 0 auto; background-color: #ffffff; min-height: 100vh; border-left: 1px solid #dcdcdc; border-right: 1px solid #dcdcdc; }

        /* Header */
        .header { display: flex; justify-content: space-between; align-items: center; padding: 1rem; position: relative; }
        .back-button { text-decoration: none; color: #333; font-weight: 500; }
        .header-title-group { position: absolute; left: 50%; transform: translateX(-50%); text-align: center; }
        .header-title { font-size: 2.2rem; font-weight: bold; margin: 0; }
        .profile-icon { font-size: 1.5rem; border: 2px solid #000; border-radius: 50%; width: 45px; height: 45px; display: flex; align-items: center; justify-content: center; margin: 0 auto; overflow: hidden; }
        .profile-icon img { width: 100%; height: 100%; object-fit: cover; }
        .profile-username { font-size: 0.8rem; color: #555; margin-top: 4px; }

        /* Main Content */
        .main-content { padding: 1rem; }
        .current-status-banner { text-align: center; font-weight: 500; margin-bottom: 1.5rem; padding: 0.5rem; border-radius: 8px; }
        .status-active { background-color: #d1e7dd; color: #0f5132; }
        .status-inactive { background-color: #f8d7da; color: #842029; }
        .status-not-verified { background-color: #fff3cd; color: #664d03; }
        .status-archived { background-color: #e2d9f3; color: #49247a; }

        .details-grid { display: grid; grid-template-columns: auto 1fr; gap: 1rem 2rem; align-items: center; }
        .avatar-section { grid-column: 1 / 2; text-align: center; }
        .avatar-img { width: 100px; height: 100px; border: 3px solid #000; padding: 0.5rem; margin-bottom: 0.5rem; display: flex; align-items: center; justify-content: center; font-size: 4rem; border-radius: 50%; overflow: hidden; }
        .avatar-img img { width: 100%; height: 100%; object-fit: cover; }
        .edit-mode .avatar-img { cursor: pointer; transition: box-shadow 0.2s; }
        .edit-mode .avatar-img:hover { box-shadow: 0 0 10px rgba(0, 123, 255, 0.7); }
        .role-text { font-weight: bold; }
        .name-section { grid-column: 2 / 3; }

        .details-section { grid-column: 1 / -1; margin-top: 1rem; }
        .detail-item { margin-bottom: 1.25rem; }
        .detail-item .label { font-weight: bold; display: block; margin-bottom: 0.25rem; }
        .detail-item .value { border: 2px solid transparent; background: transparent; padding: 0.5rem 0; word-break: break-word; }
        .detail-item .form-control { color: #555; border-radius: 8px; border: 2px solid #000; padding: 0.5rem 1rem; width: 100%; background: #f8f9fa; }
        .two-column { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; }

        /* Mode Toggling */
        .view-mode .form-control, .view-mode .save-button { display: none; }
        .edit-mode .value, .edit-mode .action-buttons { display: none !important; }

        /* Buttons & Alerts */
        .action-buttons, .save-button { display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 2rem; }
        .btn-custom { border: 2px solid #000; border-radius: 8px; font-weight: 500; background-color: #fff; }
        .btn-custom.main-action { background-color: #000; color: #fff; width: 100%; padding: 0.75rem; }
        .status-modal-body { display: flex; justify-content: space-around; text-align: center; padding: 1.5rem 0; }
        .status-option { cursor: pointer; color: #333; }
        .status-option:hover { color: #007bff; }
        .status-option i { font-size: 2.5rem; margin-bottom: 0.5rem; display: block; width: 50px; }
        #alert-container { position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index: 2000; width: 90%; max-width: 480px; }

        @media (min-width: 768px) { .page-container { max-width: 720px; } }
    </style>
</head>
<body>

<div id="alert-container"></div>

<div id="page-container" class="page-container view-mode">
    <header class="header">
        <a href="#" class="back-button" id="back-button"><i class="fas fa-chevron-left"></i> Back</a>
        <div class="header-title-group"><h1 class="header-title"><?=$pageTitle ?? 'Profile'?></h1></div>
        <div class="profile">
            <div class="profile-icon"><img src="<?=$photo?>" alt="avatar"></div>
            <span class="profile-username"><?=$fullname?></span>
        </div>
    </header>

    <main class="main-content">
        <div id="current-status" class="current-status-banner">Loading status...</div>

        <form id="details-form" onsubmit="return false;">
            <input type="file" id="photo-upload-input" style="display:none;" accept="image/*">
            <div class="details-grid">
                <div class="avatar-section">
                    <div class="avatar-img" id="avatar-container"><img id="photo-view" src="https://via.placeholder.com/100" alt="avatar"></div>
                    <div class="role-text" id="role-text"></div>
                </div>
                <div class="name-section">
                    <div class="detail-item"><span class="value" id="firstname-view"></span><input type="text" class="form-control" id="firstname-edit" placeholder="First Name"></div>
                    <div class="detail-item"><span class="value" id="middlename-view"></span><input type="text" class="form-control" id="middlename-edit" placeholder="Middle Name"></div>
                    <div class="detail-item"><span class="value" id="lastname-view"></span><input type="text" class="form-control" id="lastname-edit" placeholder="Last Name"></div>
                </div>
                <div class="details-section">
                    <div class="detail-item"><span class="label">Birthdate</span><span class="value" id="birthdate-view"></span><input type="date" class="form-control" id="birthdate-edit"></div>
                    <div class="two-column">
                        <div class="detail-item"><span class="label">Phone</span><span class="value" id="phone-view"></span><input type="tel" class="form-control" id="phone-edit"></div>
                        <div class="detail-item"><span class="label">Phone 2</span><span class="value" id="phone2-view"></span><input type="tel" class="form-control" id="phone2-edit"></div>
                    </div>
                    <div class="two-column">
                        <div class="detail-item"><span class="label">Email</span><span class="value" id="email-view"></span><input type="email" class="form-control" id="email-edit"></div>
                        <div class="detail-item"><span class="label">Email 2</span><span class="value" id="email2-view"></span><input type="email" class="form-control" id="email2-edit"></div>
                    </div>
                    <div class="two-column">
                        <div class="detail-item"><span class="label">SSN</span><span class="value" id="ssn-view"></span><input type="text" class="form-control" id="ssn-edit"></div>
                        <div class="detail-item"><span class="label">Code</span><span class="value" id="code-view"></span><input type="text" class="form-control" id="code-edit"></div>
                    </div>
                    <div class="detail-item"><span class="label">Languages</span><span class="value" id="languages-view"></span><input type="text" class="form-control" id="languages-edit"></div>
                    <div class="detail-item"><span class="label">Description</span><span class="value" id="description-view"></span><textarea class="form-control" id="description-edit"></textarea></div>
                </div>
            </div>

            <div class="action-buttons">
                <button type="button" class="btn btn-custom" id="addresses-btn">Addresses</button>
                <button type="button" class="btn btn-custom" id="patients-btn">Patients</button>
                <button type="button" class="btn btn-custom" id="status-btn" data-bs-toggle="modal" data-bs-target="#statusModal">Status</button>
                <button type="button" class="btn btn-custom" id="edit-btn">Edit</button>
            </div>
            <div class="save-button">
                <button type="button" class="btn btn-custom main-action" id="save-btn">Save</button>
            </div>
        </form>
    </main>
</div>

<div class="modal fade" id="statusModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Change Status</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
            <div class="modal-body status-modal-body">
                <div class="status-option" data-status-action="activate"><i class="fa-solid fa-user-plus"></i>Activate</div>
                <div class="status-option" data-status-action="inactivate"><i class="fa-solid fa-user-slash"></i>Inactivate</div>
                <div class="status-option" data-status-action="archive"><i class="fa-solid fa-user-minus"></i>Archive</div>
                <div class="status-option" data-status-action="delete"><i class="fa-solid fa-folder-closed"></i>Delete</div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function() {
        /**
         * Encapsulates all functionality for the User Profile page.
         */
        const UserProfileApp = {
            // Configuration and dynamic data
            state: {
                targetUserData: {},
                loggedInUserId: <?= json_encode($userId ?? null) ?>,
                targetUserId: <?= json_encode($targetUserId ?? null) ?>,
                baseUrl: <?= json_encode($baseUrl ?? '') ?>,
                authToken: <?= json_encode($authToken ?? '') ?>,
            },

            // Cached DOM elements for performance
            elements: {
                pageContainer: $('#page-container'),
                alertContainer: $('#alert-container'),
                currentStatus: $('#current-status'),
                roleText: $('#role-text'),
                photoView: $('#photo-view'),
                avatarContainer: $('#avatar-container'),
                photoUploadInput: $('#photo-upload-input'),
                editBtn: $('#edit-btn'),
                saveBtn: $('#save-btn'),
                backBtn: $('#back-button'),
                addressesBtn: $('#addresses-btn'),
                patientsBtn: $('#patients-btn'),
                statusModal: $('#statusModal'),
                statusOptions: $('.status-option'),
                // Input fields
                formFields: [
                    'firstname', 'middlename', 'lastname', 'birthdate', 'phone', 'phone2',
                    'email', 'email2', 'ssn', 'code', 'languages', 'description'
                ]
            },

            // Initialization
            init() {
                if (!this.state.targetUserId) {
                    this.helpers.showAlert('Target user ID is missing.', 'danger');
                    return;
                }
                this.bindEvents();
                this.api.fetchUserData();
            },

            // Centralized event binding
            bindEvents() {
                this.elements.editBtn.on('click', this.handlers.onEditClick.bind(this));
                this.elements.saveBtn.on('click', this.handlers.onSaveClick.bind(this));
                this.elements.backBtn.on('click', this.handlers.onBackClick.bind(this));
                this.elements.avatarContainer.on('click', this.handlers.onAvatarClick.bind(this));
                this.elements.photoUploadInput.on('change', this.handlers.onFileSelected.bind(this));
                this.elements.statusOptions.on('click', this.handlers.onStatusChange.bind(this));

                this.elements.addressesBtn.on('click', () => window.location.href = `/caregiver/addresses/${this.state.targetUserId}`);
                this.elements.patientsBtn.on('click', () => window.location.href = `/caregiver/patients/${this.state.targetUserId}`);
            },

            // --- EVENT HANDLERS ---
            handlers: {
                onEditClick() { this.setMode('edit'); },
                onSaveClick() { this.api.saveUserData(); },
                onBackClick(e) {
                    e.preventDefault();
                    if (this.elements.pageContainer.hasClass('edit-mode')) {
                        this.setMode('view');
                    } else {
                        window.history.back();
                    }
                },
                onAvatarClick() {
                    if (this.elements.pageContainer.hasClass('edit-mode')) {
                        this.elements.photoUploadInput.click();
                    }
                },
                onFileSelected(event) {
                    const file = event.target.files[0];
                    if (file) this.api.uploadOrUpdatePhoto(file);
                },
                onStatusChange(e) {
                    const action = $(e.currentTarget).data('status-action');
                    this.api.changeUserStatus(action);
                }
            },

            // --- API CALLS ---
            api: {
                _ajax(settings) {
                    const defaults = {
                        headers: { 'Authorization': UserProfileApp.state.authToken },
                        dataType: 'json'
                    };
                    return $.ajax($.extend(defaults, settings))
                        .fail(err => {
                            const errorMsg = err.responseJSON?.message || 'An unknown error occurred.';
                            UserProfileApp.helpers.showAlert(errorMsg, 'danger');
                        });
                },

                fetchUserData() {
                    this._ajax({
                        url: `${UserProfileApp.state.baseUrl}/account/${UserProfileApp.state.targetUserId}`,
                        type: 'GET'
                    }).done(response => {
                        if (response.status === 'success' && response.data) {
                            UserProfileApp.state.targetUserData = response.data;
                            UserProfileApp.render.populateView(response.data);
                        }
                    });
                },

                saveUserData() {
                    const updatedFields = {};
                    const { targetUserData } = UserProfileApp.state;

                    UserProfileApp.elements.formFields.forEach(key => {
                        const newValue = $(`#${key}-edit`).val();
                        if (newValue !== (targetUserData[key] || '')) {
                            updatedFields[key] = newValue;
                        }
                    });

                    if ($.isEmptyObject(updatedFields)) {
                        UserProfileApp.helpers.showAlert('No changes were made.', 'info');
                        UserProfileApp.setMode('view');
                        return;
                    }

                    this._ajax({
                        url: `${UserProfileApp.state.baseUrl}/user/${targetUserData.id}`,
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(updatedFields)
                    }).done(response => {
                        UserProfileApp.helpers.showAlert('User details updated successfully!', 'success');
                        this.fetchUserData();
                        UserProfileApp.setMode('view');
                    });
                },

                uploadOrUpdatePhoto(file) {
                    const { targetUserData, loggedInUserId, targetUserId, baseUrl } = UserProfileApp.state;

                    const isDefaultPhoto = targetUserData.photo?.endsWith('default.jpg');
                    const isEditingSelf = loggedInUserId === targetUserId;

                    const httpMethod = isDefaultPhoto ? 'POST' : 'PUT';
                    const endpoint = isDefaultPhoto ? 'upload/photo' : 'update/photo';

                    const finalUrl = isEditingSelf
                        ? `${baseUrl}/user/${endpoint}`
                        : `${baseUrl}/user/${targetUserId}/${endpoint}`;

                    const formData = new FormData();
                    formData.append('file', file);

                    UserProfileApp.helpers.showAlert('Uploading photo...', 'info');

                    this._ajax({
                        url: finalUrl,
                        type: httpMethod,
                        data: formData,
                        processData: false,
                        contentType: false
                    }).done(response => {
                        UserProfileApp.helpers.showAlert(response.message || 'Photo updated!', 'success');
                        this.fetchUserData();
                    });
                },

                changeUserStatus(action) {
                    const endpoints = { activate: 'activate', inactivate: 'inactivate', archive: 'archive', delete: 'delete' };
                    if (!endpoints[action]) return;

                    this._ajax({
                        url: `${UserProfileApp.state.baseUrl}/auth/${endpoints[action]}/account`,
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify({ id: String(UserProfileApp.state.targetUserId) })
                    }).done(response => {
                        UserProfileApp.helpers.showAlert(response.message || 'User status changed successfully.', 'success');
                        bootstrap.Modal.getInstance(UserProfileApp.elements.statusModal[0])?.hide();
                        this.fetchUserData();
                    });
                }
            },

            // --- DOM MANIPULATION & RENDERING ---
            render: {
                populateView(data) {
                    const h = UserProfileApp.helpers;
                    const statusInfo = h.getStatusInfo(data.status);

                    UserProfileApp.elements.currentStatus.text(statusInfo.text).removeClass().addClass('current-status-banner ' + statusInfo.class);
                    UserProfileApp.elements.roleText.text(h.getRoleText(data.role));
                    UserProfileApp.elements.photoView.attr('src', data.photo ? `${UserProfileApp.state.baseUrl}${data.photo}` : 'https://via.placeholder.com/100');

                    UserProfileApp.elements.formFields.forEach(key => {
                        $(`#${key}-view`).text(data[key] || 'N/A');
                    });
                },

                populateEdit(data) {
                    UserProfileApp.elements.formFields.forEach(key => {
                        $(`#${key}-edit`).val(data[key] || '');
                    });
                }
            },

            // --- HELPERS & UTILITIES ---
            helpers: {
                getRoleText: role => ({ 0: 'Administrator', 1: 'Manager', 2: 'Caregiver' }[role] || 'Unknown'),
                getStatusInfo(status) {
                    const s = parseInt(status, 10);
                    const map = {
                        '-1': { text: 'Not Verified', class: 'status-not-verified' },
                        '0': { text: 'Inactive', class: 'status-inactive' },
                        '1': { text: 'Active', class: 'status-active' },
                        '2': { text: 'Archived', class: 'status-archived' },
                    };
                    return map[s] || { text: 'Unknown Status', class: '' };
                },
                showAlert(message, type = 'success') {
                    const alertHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`;
                    UserProfileApp.elements.alertContainer.html(alertHTML);
                }
            },

            // --- UI/MODE MANAGEMENT ---
            setMode(mode) {
                if (mode === 'edit') {
                    this.render.populateEdit(this.state.targetUserData);
                    this.elements.pageContainer.removeClass('view-mode').addClass('edit-mode');
                } else { // view mode
                    this.elements.pageContainer.removeClass('edit-mode').addClass('view-mode');
                }
            }
        };

        UserProfileApp.init();
    });
</script>
</body>
</html>
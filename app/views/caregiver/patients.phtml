<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?=$pageTitle ?? 'Caregiver\'s Patients'?></title>

    <link rel="apple-touch-icon" sizes="180x180" href="../../img/fav/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../img/fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../img/fav/favicon-16x16.png">
    <link rel="manifest" href="../../site.webmanifest">
    <link rel="shortcut icon" href="../../img/fav/favicon.ico">

    <!-- Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

    <style>
        html, body { height: 100vh; overflow: hidden; background-color: #f0f2f5; font-family: 'Segoe UI', 'Roboto', sans-serif; }
        .page-container { display: flex; flex-direction: column; height: 100vh; max-width: 500px; margin: 0 auto; background-color: #ffffff; border-left: 1px solid #dcdcdc; border-right: 1px solid #dcdcdc; position: relative; }

        /* Header & Fixed Info */
        .header { display: flex; justify-content: space-between; align-items: center; padding: 1rem; position: relative; flex-shrink: 0; }
        .back-button { text-decoration: none; color: #333; font-weight: 500; }
        .header-title { font-size: 1.8rem; font-weight: bold; margin: 0; position: absolute; left: 50%; transform: translateX(-50%); }
        .profile-icon { font-size: 1.5rem; border: 2px solid #000; border-radius: 50%; width: 45px; height: 45px; display: flex; align-items: center; justify-content: center; margin: 0 auto; overflow: hidden; }
        .profile-icon img { width: 100%; height: 100%; object-fit: cover; }
        .profile-username { font-size: 0.8rem; color: #555; margin-top: 4px; }
        .target-user-info { display: flex; align-items: center; gap: 1rem; padding: 1rem; flex-shrink: 0; border-bottom: 1px solid #e0e0e0; }
        .target-user-avatar { width: 60px; height: 60px; border: 2px solid #000; border-radius: 50%; overflow: hidden; }
        .target-user-avatar img { width: 100%; height: 100%; object-fit: cover; }
        .target-user-name { font-weight: bold; font-size: 1.25rem; }

        .controls-section { padding: 1rem; background-color: #f8f9fa; border-bottom: 1px solid #e0e0e0; flex-shrink: 0; }
        .search-bar .form-control { border-radius: 8px; border: 2px solid #000; }

        /* Lists */
        .patient-list-container { flex-grow: 1; overflow-y: auto; padding: 1rem; padding-bottom: 120px; }
        .patient-item { display: flex; align-items: center; gap: 1rem; border: 2px solid #000; border-radius: 15px; padding: 1rem; margin-bottom: 1rem; cursor: pointer; transition: background-color 0.2s; }
        .patient-item:hover { background-color: #f1f1f1; }
        .patient-avatar { width: 60px; height: 60px; border-radius: 50%; border: 3px solid #000; overflow: hidden; display:flex; align-items:center; justify-content:center; }
        .patient-avatar img { width: 100%; height: 100%; object-fit: cover; }
        .patient-name { font-weight: bold; font-size: 1.1rem; }

        /* FAB & UI Components */
        .fab { position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); width: 90px; height: 90px; border-radius: 50%; background-color: #e0e0e0; border: 3px solid #000; display: flex; flex-direction: column; align-items: center; justify-content: center; font-weight: 500; text-decoration: none; color: #000; box-shadow: 0 4px 8px rgba(0,0,0,0.2); z-index: 1040; }
        .fab .plus-icon { font-size: 2rem; line-height: 1; }
        #alert-container { position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index: 2000; width: 90%; max-width: 480px; }
        .confirmation-options { display: flex; justify-content: space-around; padding-top: 1.5rem; }
        .confirmation-option { cursor: pointer; text-decoration: none; color: #000; font-weight: bold; }
        .confirmation-option:hover { opacity: 0.8; }
        .confirmation-option i { font-size: 3rem; margin-bottom: 0.5rem; display: block; color: #fff; background-color: #000; border-radius: 15px; padding: 0.5rem; }
    </style>
</head>
<body>

<div id="alert-container"></div>

<div class="page-container">
    <header class="header">
        <a href="/caregiver/management" class="back-button"><i class="fas fa-chevron-left"></i> Back</a>
        <h1 class="header-title"><?=$pageTitle ?? "Caregiver's Patients"?></h1>
        <div class="profile">
            <div class="profile-icon"><img src="<?=$photo?>" alt="avatar"></div>
            <span class="profile-username"><?=$fullname?></span>
        </div>
    </header>

    <section class="target-user-info">
        <div class="target-user-avatar"><img id="target-user-avatar-img" src="https://via.placeholder.com/60" alt="Caregiver"></div>
        <div class="target-user-name" id="target-user-name">Loading...</div>
    </section>

    <section class="controls-section">
        <div class="input-group search-bar">
            <input type="text" id="search-input-main" class="form-control" placeholder="Search assigned patients...">
        </div>
    </section>

    <main class="patient-list-container">
        <div id="assigned-patient-list"><div class="text-center p-5"><div class="spinner-border"></div></div></div>
    </main>
</div>

<a href="#" class="fab" id="add-patient-btn"><div class="plus-icon">+</div><div>Patient</div></a>

<div class="modal fade" id="confirmationModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content" style="border-radius: 1rem; border: 2px solid #000;"><div class="modal-header"><h5 class="modal-title w-100 text-center" id="confirmation-modal-title"></h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body text-center"><p id="confirmation-modal-text"></p><div class="confirmation-options"><a href="#" class="confirmation-option" id="confirm-yes-btn"><i class="fa-solid fa-check"></i>Yes</a><a href="#" class="confirmation-option" data-bs-dismiss="modal"><i class="fa-solid fa-xmark"></i>No</a></div></div></div></div></div>
<div class="offcanvas offcanvas-bottom h-100" tabindex="-1" id="assignPatientOffcanvas"><div class="offcanvas-header"><h5 class="offcanvas-title w-100 text-center">Assign Patient</h5><button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button></div><div class="offcanvas-body d-flex flex-column"><div class="input-group search-bar mb-3"><input type="text" id="search-input-offcanvas" class="form-control" placeholder="Search unassigned patients..."></div><div id="unassigned-patient-list-container" class="patient-list-container flex-grow-1 p-0"></div></div></div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function() {
        const CaregiverPatientsApp = {
            state: {
                userId: <?= json_encode($targetUserId ?? null) ?>,
                baseUrl: <?= json_encode($baseUrl ?? '') ?>,
                authToken: <?= json_encode($authToken ?? '') ?>,
                assigned: [], unassigned: [],
            },
            elements: {
                alertContainer: $('#alert-container'), userName: $('#target-user-name'), userAvatar: $('#target-user-avatar-img'),
                assignedList: $('#assigned-patient-list'), unassignedList: $('#unassigned-patient-list-container'),
                mainSearch: $('#search-input-main'), offcanvasSearch: $('#search-input-offcanvas'),
                addPatientBtn: $('#add-patient-btn'), confirmYesBtn: $('#confirm-yes-btn'),
                modalTitle: $('#confirmation-modal-title'), modalText: $('#confirmation-modal-text'),
            },
            modals: { offcanvas: null, confirmation: null },

            init() {
                if (!this.state.userId) { this.helpers.showAlert('Target User ID is missing.', 'danger'); return; }
                this.modals.offcanvas = new bootstrap.Offcanvas('#assignPatientOffcanvas');
                this.modals.confirmation = new bootstrap.Modal('#confirmationModal');
                this.bindEvents();
                this.api.fetchAssigned();
            },

            bindEvents() {
                const h = this.handlers;
                const debouncedMain = this.helpers.debounce(() => h.filterList('assigned'), 300);
                const debouncedOffcanvas = this.helpers.debounce(() => h.filterList('unassigned'), 300);

                this.elements.mainSearch.on('keyup', debouncedMain);
                this.elements.offcanvasSearch.on('keyup', debouncedOffcanvas);
                this.elements.assignedList.on('click', '.patient-item', e => h.openConfirmation('unassign', $(e.currentTarget).data('patient-id')));
                this.elements.unassignedList.on('click', '.patient-item', e => h.openConfirmation('assign', $(e.currentTarget).data('patient-id')));
                this.elements.addPatientBtn.on('click', h.onAddClick);
                this.elements.confirmYesBtn.on('click', h.onConfirmAction);

                $('#assignPatientOffcanvas').on('hidden.bs.offcanvas', () => this.api.fetchAssigned());
                window.addEventListener('pageshow', e => { if (e.persisted) this.api.fetchAssigned(); });
            },

            handlers: {
                onAddClick(e) { e.preventDefault(); CaregiverPatientsApp.api.fetchUnassigned(); CaregiverPatientsApp.modals.offcanvas.show(); },
                openConfirmation(action, patientId) {
                    const app = CaregiverPatientsApp;
                    const isUnassign = action === 'unassign';
                    const list = isUnassign ? app.state.assigned : app.state.unassigned;
                    const patient = list.find(p => p.id == patientId);
                    if (!patient) return;

                    const userName = app.elements.userName.text();
                    const patientName = `${patient.firstname} ${patient.lastname}`.trim();
                    app.elements.modalTitle.text(isUnassign ? 'Unassign Patient' : 'Assign Patient');
                    app.elements.modalText.html(`Are you sure you want to ${action} patient:<br><strong>${patientName}</strong><br>${isUnassign ? 'from' : 'to'} caregiver:<br><strong>${userName}</strong>`);
                    app.elements.confirmYesBtn.data({ action, patientId });
                    app.modals.confirmation.show();
                },
                onConfirmAction() {
                    const app = CaregiverPatientsApp;
                    const { action, patientId } = $(this).data();
                    app.api.performAssignment(action, patientId).done(() => {
                        app.modals.confirmation.hide();
                        // Optimistic UI update for instant feedback
                        if (action === 'assign') {
                            const patientToMove = app.state.unassigned.find(p => p.id == patientId);
                            if(patientToMove) {
                                app.state.assigned.push(patientToMove);
                                app.state.unassigned = app.state.unassigned.filter(p => p.id != patientId);
                            }
                        } else { // unassign
                            const patientToMove = app.state.assigned.find(p => p.id == patientId);
                            if(patientToMove) {
                                app.state.unassigned.push(patientToMove);
                                app.state.assigned = app.state.assigned.filter(p => p.id != patientId);
                            }
                        }
                        app.render.list('unassigned');
                    });
                },
                filterList(type) {
                    const app = CaregiverPatientsApp;
                    const searchTerm = (type === 'assigned' ? app.elements.mainSearch : app.elements.offcanvasSearch).val().toLowerCase();
                    const sourceList = app.state[type];
                    const filtered = !searchTerm ? sourceList : sourceList.filter(p => `${p.firstname} ${p.lastname}`.toLowerCase().includes(searchTerm));
                    app.render.list(type, filtered);
                }
            },

            api: {
                _ajax: settings => $.ajax({ ...settings, headers: { 'Authorization': CaregiverPatientsApp.state.authToken }, dataType: 'json' })
                    .fail(err => CaregiverPatientsApp.helpers.showAlert(err.responseJSON?.message || 'API request failed.', 'danger')),

                fetchAssigned() {
                    this._ajax({ url: `${CaregiverPatientsApp.state.baseUrl}/assigned/patients/${CaregiverPatientsApp.state.userId}` }).done(res => {
                        if (res.status === 'success' && res.data) {
                            CaregiverPatientsApp.state.assigned = res.data.patients;
                            CaregiverPatientsApp.render.userHeader(res.data.user);
                            CaregiverPatientsApp.render.list('assigned');
                        }
                    });
                },
                fetchUnassigned() {
                    CaregiverPatientsApp.elements.unassignedList.html('<div class="text-center p-5"><div class="spinner-border"></div></div>');
                    this._ajax({ url: `${CaregiverPatientsApp.state.baseUrl}/unassigned/patients/${CaregiverPatientsApp.state.userId}` }).done(res => {
                        if (res.status === 'success' && res.data) {
                            CaregiverPatientsApp.state.unassigned = res.data.patients;
                            CaregiverPatientsApp.render.list('unassigned');
                        }
                    });
                },
                performAssignment(action, patientId) {
                    return this._ajax({
                        url: `${CaregiverPatientsApp.state.baseUrl}/${action}/patients`,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ user_id: CaregiverPatientsApp.state.userId, patient_ids: [patientId] }),
                    }).done(res => CaregiverPatientsApp.helpers.showAlert(res.message || 'Action successful!', 'success'));
                },
            },

            render: {
                userHeader(user) {
                    if (user) {
                        CaregiverPatientsApp.elements.userName.text(user.fullname);
                        if (user.photo) CaregiverPatientsApp.elements.userAvatar.attr('src', CaregiverPatientsApp.state.baseUrl + user.photo).show();
                    }
                },
                list(type, customList = null) {
                    const app = CaregiverPatientsApp;
                    const list = customList ?? app.state[type];
                    const container = (type === 'assigned') ? app.elements.assignedList : app.elements.unassignedList;

                    container.empty();
                    if (!list?.length) {
                        const message = type === 'unassigned' ? 'No more patients to assign.' : 'No patients are currently assigned.';
                        container.html(`<p class="text-center text-muted mt-4">${message}</p>`);
                        return;
                    }
                    const itemsHTML = list.map(p => app.helpers.getListItemHTML(p)).join('');
                    container.html(itemsHTML);
                }
            },

            helpers: {
                getListItemHTML(patient) {
                    const fullName = `${patient.firstname || ''} ${patient.lastname || ''}`.trim();
                    const photoSrc = CaregiverPatientsApp.state.baseUrl + patient.photo;
                    return `
                        <div class="patient-item" data-patient-id="${patient.id}">
                            <div class="patient-avatar"><img src="${photoSrc}" alt="Avatar"></div>
                            <div class="patient-name">${fullName}</div>
                        </div>`;
                },
                showAlert(message, type = 'success') {
                    const alertHTML = `<div class="alert alert-${type} alert-dismissible fade show">${message}<button class="btn-close" data-bs-dismiss="alert"></button></div>`;
                    CaregiverPatientsApp.elements.alertContainer.html(alertHTML).children().delay(4000).fadeOut();
                },
                debounce(func, delay) {
                    let timeout;
                    return function(...args) { clearTimeout(timeout); timeout = setTimeout(() => func.apply(this, args), delay); };
                },
            }
        };

        CaregiverPatientsApp.init();
    });
</script>
</body>
</html>
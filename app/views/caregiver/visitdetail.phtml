<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?=$pageTitle ?? 'Visit Details'?></title>

    <link rel="apple-touch-icon" sizes="180x180" href="../../img/fav/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../img/fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../img/fav/favicon-16x16.png">
    <link rel="manifest" href="../../site.webmanifest">
    <link rel="shortcut icon" href="../../img/fav/favicon.ico">

    <!-- Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

    <style>
        body { background-color: #f0f2f5; font-family: 'Segoe UI', 'Roboto', sans-serif; }
        .page-container { max-width: 500px; margin: 0 auto; background-color: #ffffff; min-height: 100vh; border-left: 1px solid #dcdcdc; border-right: 1px solid #dcdcdc; }
        .header { display: flex; justify-content: space-between; align-items: center; padding: 1rem; position: relative; }
        .back-button { text-decoration: none; color: #333; font-weight: 500; }
        .header-title { font-size: 2.2rem; font-weight: bold; }
        .profile { text-align: center; }
        .profile-icon { font-size: 1.5rem; border: 2px solid #000; border-radius: 50%; width: 45px; height: 45px; display: flex; align-items: center; justify-content: center; margin: 0 auto; overflow: hidden; }
        .profile-icon img { width: 100%; height: 100%; object-fit: cover; }
        .profile-username { font-size: 0.8rem; color: #555; margin-top: 4px; }

        .main-content { padding: 1.5rem; }
        .visit-header { text-align: center; margin-bottom: 1.5rem; }
        .visit-progress-text { font-size: 1.25rem; font-weight: 500; color: #555; }
        .visit-date-text { font-size: 1.75rem; font-weight: bold; margin-top: 0.25rem; }

        .participants-grid { display: grid; grid-template-columns: 1fr auto 1fr; align-items: center; gap: 1rem; }
        .participant { text-align: center; }
        .participant-avatar { width: 70px; height: 70px; border: 3px solid #000; border-radius: 50%; overflow: hidden; margin: 0 auto 0.5rem; display:flex; align-items:center; justify-content:center;}
        .participant-avatar img { width: 100%; height: 100%; object-fit: cover; }
        .participant-role { font-size: 0.8rem; text-transform: uppercase; color: #6c757d; }
        .participant-name { font-weight: 500; font-size: 1.1rem; }
        .visit-meta { text-align: center; }

        .address-box { border: 2px solid #000; border-radius: 1rem; padding: 1rem; margin-top: 1.5rem; }
        .edit-mode .address-box { cursor: pointer; border-style: dashed; border-color: #0d6efd; background-color: #f8f9fa; }
        .address-box-header { display: flex; align-items: center; gap: 1rem; font-weight: bold; font-size: 1.25rem; margin-bottom: 0.5rem; }
        .address-box-icon { font-size: 2rem; }

        .details-list { list-style: none; padding: 0; margin-top: 1.5rem; }
        .details-list li { display: flex; flex-direction: column; padding: 0.5rem 0; border-bottom: 1px solid #eee; }
        .details-list .list-item-row { display: flex; justify-content: space-between; align-items: center; width: 100%;}
        .details-list .label { font-weight: bold; }
        .details-list .value { color: #555; text-align: right; }
        .details-list .note-value { text-align: left; white-space: pre-wrap; width: 100%; margin-top: 0.25rem; }

        .view-mode .editable-field, .view-mode .save-button { display: none; }
        .edit-mode .read-only-value, .edit-mode .action-buttons { display: none !important; }

        .action-buttons, .save-button { display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 2rem; }
        .btn-custom { border: 2px solid #000; border-radius: 8px; font-weight: 500; background-color: #fff; }
        .btn-custom.main-action { background-color: #000; color: #fff; width: 100%; padding: 0.75rem; }

        .offcanvas-body .selection-list { max-height: 40vh; overflow-y: auto; }
        .offcanvas-body .selection-item { display: flex; align-items: center; gap: 1rem; border: 2px solid #ccc; border-radius: 15px; padding: 0.75rem; margin-bottom: 0.5rem; cursor: pointer; }
        .offcanvas-body .selection-item.selected { border-color: #0d6efd; background-color: #eef5ff; }
        #alert-container { position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index: 2000; width: 90%; max-width: 480px; }
    </style>
</head>
<body>

<div id="alert-container"></div>

<div id="page-container" class="page-container view-mode">
    <header class="header">
        <a href="#" class="back-button" id="back-button"><i class="fas fa-chevron-left"></i> Exit</a>
        <h1 class="header-title">Visit</h1>
        <div class="profile">
            <div class="profile-icon"><img src="<?=$photo?>" alt="avatar"></div>
            <span class="profile-username"><?=$fullname?></span>
        </div>
    </header>

    <main class="main-content">
        <div id="visit-content-placeholder"><div class="text-center p-5"><div class="spinner-border"></div></div></div>

        <div id="visit-content" style="display:none;">
            <div class="visit-header"><div id="visit-progress-text" class="visit-progress-text"></div><div id="visit-date-text" class="visit-date-text"></div></div>
            <div class="participants-grid">
                <div class="participant"><div class="participant-avatar"><img id="caregiver-avatar" src=""></div><div class="participant-role">Caregiver</div><div id="caregiver-name" class="participant-name"></div></div>
                <div class="visit-meta"><div id="visit-duration" class="fw-bold"></div><div id="visit-relative-time" class="text-muted"></div></div>
                <div class="participant"><div class="participant-avatar"><img id="patient-avatar" src=""></div><div class="participant-role">Patient</div><div id="patient-name" class="participant-name"></div></div>
            </div>
            <div id="address-box" class="address-box"><div class="address-box-header"><i id="address-icon" class="fa-solid"></i> Address</div><div id="address-text" class="address-text"></div></div>

            <ul class="details-list">
                <li class="view-mode"><div class="list-item-row"><span class="label">Start time:</span> <span class="value" id="start_time-view"></span></div></li>
                <li class="edit-mode"><div class="list-item-row"><span class="label">Visit Date:</span> <span class="value" id="visit_date-edit"></span></div></li>
                <li class="edit-mode"><div class="list-item-row"><span class="label">Start time:</span> <input type="time" class="form-control editable-field" id="start_time-edit"></div></li>
                <li class="view-mode"><div class="list-item-row"><span class="label">Total Hours:</span> <span class="value" id="duration-view"></span></div></li>
                <li class="edit-mode"><div class="list-item-row"><span class="label">Total Hours:</span> <input type="number" class="form-control editable-field" id="total_hours-edit" min="1" max="12" placeholder="e.g., 4"></div></li>
                <li><div class="list-item-row"><span class="label">Scheduled by:</span> <span class="value" id="scheduled_by-view"></span></div></li>
                <li><div class="list-item-row"><span class="label">Check-in by:</span> <span class="value" id="checkin_by-view"></span></div></li>
                <li><div class="list-item-row"><span class="label">Check-out by:</span> <span class="value" id="checkout_by-view"></span></div></li>
                <li><div class="list-item-row"><span class="label">Approved by:</span> <span class="value" id="approved_by-view"></span></div></li>
                <li><div class="list-item-row"><span class="label">Canceled by:</span> <span class="value" id="canceled_by-view"></span></div></li>
                <li><span class="label">Note:</span> <span class="value note-value read-only-value" id="note-view"></span> <textarea class="form-control editable-field" id="note-edit"></textarea></li>
            </ul>

            <div class="action-buttons">
                <button type="button" class="btn btn-custom" id="progress-btn">Progress</button>
                <button type="button" class="btn btn-custom" id="status-btn">Status</button>
                <button type="button" class="btn btn-custom" id="edit-btn">Edit</button>
            </div>
            <div class="save-button"><button type="button" class="btn btn-custom main-action" id="save-btn">Save Changes</button></div>
        </div>
    </main>
</div>

<!-- Modals & Offcanvas -->
<div class="modal fade" id="progressModal" tabindex="-1"> <div class="modal-dialog modal-dialog-centered"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Change Progress</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body"><div class="d-grid gap-2"><button class="btn btn-outline-info" data-action="checkin">Check-in</button><button class="btn btn-outline-secondary" data-action="checkout">Check-out</button><button class="btn btn-outline-success" data-action="approve">Approved</button><button class="btn btn-outline-danger" data-action="cancel">Cancel</button></div><div id="cancel-note-group" class="mt-3" style="display:none;"><label for="cancel-note" class="form-label">Cancellation Note (Required)</label><textarea class="form-control" id="cancel-note" rows="3"></textarea><button class="btn btn-danger w-100 mt-2" id="confirm-cancel-btn">Confirm Cancellation</button></div></div></div></div></div>
<div class="modal fade" id="statusModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Change Status</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body"><div class="d-grid gap-2"><button class="btn btn-outline-primary" data-action="status/visible">Visible</button><button class="btn btn-outline-warning" data-action="status/archived">Archived</button><button class="btn btn-outline-danger" data-action="status/deleted">Deleted</button></div></div></div></div></div>
<div class="modal fade" id="confirmAddressModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Edit Address</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body text-center">Do you want to edit the Address?<div class="d-flex justify-content-center gap-2 mt-3"><button class="btn btn-primary" id="confirm-address-yes">Yes</button><button class="btn btn-secondary" data-bs-dismiss="modal">No</button></div></div></div></div></div>
<div class="offcanvas offcanvas-bottom" tabindex="-1" id="addressOffcanvas" style="height: 75%;"><div class="offcanvas-header"><h5 class="offcanvas-title w-100 text-center">Change Address</h5><button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button></div><div class="offcanvas-body"><div class="input-group search-bar mb-2"><input type="text" id="address-search" class="form-control" placeholder="Search address..."></div><div class="selection-list" id="address-selection-list"></div></div></div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    $(document).ready(function() {
        /**
         * Encapsulates all functionality for the Visit Detail page.
         */
        const VisitDetailApp = {
            state: {
                visitId: <?= json_encode($visitId ?? null) ?>,
                baseUrl: <?= json_encode($baseUrl ?? '') ?>,
                authToken: <?= json_encode($authToken ?? '') ?>,
                currentVisitData: {},
            },

            elements: {
                pageContainer: $('#page-container'),
                alertContainer: $('#alert-container'),
                visitContent: $('#visit-content'),
                placeholder: $('#visit-content-placeholder'),
                backBtn: $('#back-button'),
                editBtn: $('#edit-btn'),
                saveBtn: $('#save-btn'),
                progressBtn: $('#progress-btn'),
                statusBtn: $('#status-btn'),
                confirmCancelBtn: $('#confirm-cancel-btn'),
                cancelNote: $('#cancel-note'),
                cancelNoteGroup: $('#cancel-note-group'),
                addressBox: $('#address-box'),
                addressSelectionList: $('#address-selection-list'),
                confirmAddressYesBtn: $('#confirm-address-yes'),
            },

            // Bootstrap component instances
            modals: {
                progress: null,
                status: null,
                confirmAddress: null,
                addressOffcanvas: null,
            },

            init() {
                if (!this.state.visitId) {
                    this.helpers.showAlert('Visit ID is missing.', 'danger');
                    this.elements.placeholder.text('Error: No Visit ID specified.');
                    return;
                }
                this.modals.progress = new bootstrap.Modal(document.getElementById('progressModal'));
                this.modals.status = new bootstrap.Modal(document.getElementById('statusModal'));
                this.modals.confirmAddress = new bootstrap.Modal(document.getElementById('confirmAddressModal'));
                this.modals.addressOffcanvas = new bootstrap.Offcanvas(document.getElementById('addressOffcanvas'));

                this.bindEvents();
                this.api.fetchVisitDetails();
            },

            bindEvents() {
                this.elements.editBtn.on('click', () => this.setMode('edit'));
                this.elements.saveBtn.on('click', this.handlers.onSave);
                this.elements.backBtn.on('click', this.handlers.onBack);
                this.elements.progressBtn.on('click', () => this.modals.progress.show());
                this.elements.statusBtn.on('click', () => this.modals.status.show());
                this.elements.confirmCancelBtn.on('click', this.handlers.onConfirmCancel);
                this.elements.addressBox.on('click', this.handlers.onAddressBoxClick);
                this.elements.confirmAddressYesBtn.on('click', this.handlers.onConfirmAddressChange);
                this.elements.addressSelectionList.on('click', '.selection-item', this.handlers.onAddressSelect);

                $('#progressModal').on('click', 'button[data-action]', this.handlers.onProgressAction);
                $('#statusModal').on('click', 'button[data-action]', this.handlers.onStatusAction);
            },

            handlers: {
                onBack(e) {
                    e.preventDefault();
                    if (VisitDetailApp.elements.pageContainer.hasClass('edit-mode')) {
                        VisitDetailApp.setMode('view');
                    } else {
                        window.history.back();
                    }
                },
                onSave() {
                    const totalHours = parseInt($('#total_hours-edit').val());
                    if (isNaN(totalHours) || totalHours <= 0) {
                        VisitDetailApp.helpers.showAlert('Total Hours must be a number greater than 0.', 'warning');
                        return;
                    }

                    const visitDate = new Date(VisitDetailApp.state.currentVisitData.start_time);
                    const timeParts = $('#start_time-edit').val().split(':');
                    visitDate.setHours(parseInt(timeParts[0]), parseInt(timeParts[1]), 0, 0);

                    const payload = {
                        start_time: visitDate.toISOString().slice(0, 19).replace('T', ' '),
                        total_hours: totalHours,
                        note: $('#note-edit').val()
                    };

                    VisitDetailApp.api.updateVisit(payload)
                        .done(() => VisitDetailApp.setMode('view'));
                },
                onProgressAction(e) {
                    const action = $(e.currentTarget).data('action');
                    if (action === 'cancel') {
                        VisitDetailApp.elements.cancelNoteGroup.show();
                    } else {
                        VisitDetailApp.api.performAction(action).done(() => VisitDetailApp.modals.progress.hide());
                    }
                },
                onStatusAction(e) {
                    const action = $(e.currentTarget).data('action');
                    VisitDetailApp.api.performAction(action).done(() => VisitDetailApp.modals.status.hide());
                },
                onConfirmCancel() {
                    const note = VisitDetailApp.elements.cancelNote.val();
                    if (!note.trim()) {
                        VisitDetailApp.helpers.showAlert('A cancellation note is required.', 'warning');
                        return;
                    }
                    VisitDetailApp.api.performAction('cancel', { note }).done(() => {
                        VisitDetailApp.modals.progress.hide();
                        VisitDetailApp.elements.cancelNote.val('');
                        VisitDetailApp.elements.cancelNoteGroup.hide();
                    });
                },
                onAddressBoxClick() {
                    if (VisitDetailApp.elements.pageContainer.hasClass('edit-mode')) {
                        VisitDetailApp.modals.confirmAddress.show();
                    }
                },
                onConfirmAddressChange() {
                    VisitDetailApp.modals.confirmAddress.hide();
                    VisitDetailApp.api.fetchPatientAddresses();
                },
                onAddressSelect(e) {
                    const addressId = $(e.currentTarget).data('id');
                    VisitDetailApp.api.updateVisit({ address_id: addressId })
                        .done(() => VisitDetailApp.modals.addressOffcanvas.hide());
                }
            },

            api: {
                _ajax(settings) {
                    return $.ajax({
                        ...settings,
                        headers: { 'Authorization': VisitDetailApp.state.authToken, 'Content-Type': 'application/json' },
                    }).fail(err => {
                        const errorMsg = err.responseJSON?.message || 'An API error occurred.';
                        VisitDetailApp.helpers.showAlert(errorMsg, 'danger');
                    });
                },
                fetchVisitDetails() {
                    this._ajax({ url: `${VisitDetailApp.state.baseUrl}/visit/${VisitDetailApp.state.visitId}` })
                        .done(res => {
                            if (res.status === 'success') {
                                VisitDetailApp.state.currentVisitData = res.data;
                                VisitDetailApp.render.visitDetails(res.data);
                            }
                        });
                },
                updateVisit(payload) {
                    return this._ajax({
                        url: `${VisitDetailApp.state.baseUrl}/visit/${VisitDetailApp.state.visitId}`,
                        type: 'PUT',
                        data: JSON.stringify(payload)
                    }).done(res => {
                        VisitDetailApp.helpers.showAlert(res.message || 'Visit updated successfully!', 'success');
                        this.fetchVisitDetails();
                    });
                },
                performAction(actionEndpoint, payload = null) {
                    return this._ajax({
                        url: `${VisitDetailApp.state.baseUrl}/visit/${VisitDetailApp.state.visitId}/${actionEndpoint}`,
                        type: 'PUT',
                        data: payload ? JSON.stringify(payload) : null
                    }).done(res => {
                        VisitDetailApp.helpers.showAlert(res.message || 'Action completed successfully!', 'success');
                        this.fetchVisitDetails();
                    });
                },
                fetchPatientAddresses() {
                    this._ajax({ url: `${VisitDetailApp.state.baseUrl}/address/person/${VisitDetailApp.state.currentVisitData.patient_id}/1` })
                        .done(res => {
                            VisitDetailApp.render.addressSelectionList(res.data);
                            VisitDetailApp.modals.addressOffcanvas.show();
                        });
                },
                fetchAccountName(userId, elementId) {
                    this._ajax({ url: `${VisitDetailApp.state.baseUrl}/account/${userId}` })
                        .done(res => {
                            if (res.status === 'success' && res.data) {
                                $(`#${elementId}`).text(`${res.data.firstname} ${res.data.lastname}`);
                            }
                        }).fail(() => $(`#${elementId}`).text('Unknown User'));
                }
            },

            render: {
                visitDetails(data) {
                    if (!data?.user || !data?.patient) { return; }
                    const h = VisitDetailApp.helpers;

                    $('#visit-progress-text').text(h.getProgressText(data.progress));
                    $('#visit-date-text').text(new Date(data.start_time).toLocaleDateString('en-US', { month: 'long', day: 'numeric' }));
                    $('#visit-duration').text(`${Math.floor(data.duration_minutes / 60)} hrs total`);
                    $('#visit-relative-time').text(h.getRelativeTime(data.start_time));
                    $('#caregiver-avatar').attr('src', data.user.photo ? VisitDetailApp.state.baseUrl + data.user.photo : 'https://via.placeholder.com/70');
                    $('#caregiver-name').text(`${data.user.firstname} ${data.user.lastname}`);
                    $('#patient-avatar').attr('src', data.patient.photo ? VisitDetailApp.state.baseUrl + data.patient.photo : 'https://via.placeholder.com/70');
                    $('#patient-name').text(`${data.patient.firstname} ${data.patient.lastname}`);

                    if (data.address) {
                        $('#address-text').html(`${data.address.address}<br>${data.address.city}, ${data.address.state} ${data.address.zipcode}`);
                        $('#address-icon').attr('class', data.address.type === 'Apartment' ? 'fa-solid fa-building' : 'fa-solid fa-house');
                    }

                    $('#start_time-view').text(h.getFormattedDateTime(data.start_time));
                    $('#duration-view').text(`${Math.floor(data.duration_minutes / 60)} Hours`);
                    $('#note-view').text(data.note || 'N/A');

                    ['scheduled_by', 'checkin_by', 'checkout_by', 'approved_by', 'canceled_by'].forEach(key => {
                        const el = $(`#${key}-view`);
                        data[key] ? VisitDetailApp.api.fetchAccountName(data[key], `${key}-view`, el.text('Loading...')) : el.text('TBD');
                    });

                    VisitDetailApp.elements.placeholder.hide();
                    VisitDetailApp.elements.visitContent.show();
                },
                addressSelectionList(addresses) {
                    const list = VisitDetailApp.elements.addressSelectionList.empty();
                    if (addresses?.length) {
                        addresses.forEach(addr => list.append(`<div class="selection-item" data-id="${addr.id}">${addr.address}, ${addr.city}</div>`));
                    } else {
                        list.html('<p class="text-center text-muted">No other addresses found.</p>');
                    }
                }
            },

            helpers: {
                showAlert: (message, type = 'success') => VisitDetailApp.elements.alertContainer.html(`<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`).fadeIn().delay(4000).fadeOut(),
                getProgressText: p => ({ '-1': "Canceled", '0': "Scheduled", '1': "Check-in", '2': "Check-out", '3': "Approved" }[p] || 'Unknown'),
                getFormattedDateTime: dStr => new Date(dStr).toLocaleString('en-US', { month: 'long', day: 'numeric', year: 'numeric', hour: 'numeric', minute: '2-digit', hour12: true }),
                getRelativeTime(dStr) { const n=new Date(),v=new Date(dStr);n.setHours(0,0,0,0);v.setHours(0,0,0,0);const d=Math.ceil((v-n)/864e5);if(d<0)return"Past";if(d===0)return"Today";if(d===1)return"Tomorrow";return`In ${d} days`;}
            },

            setMode(mode) {
                if (mode === 'edit') {
                    const startDate = new Date(this.state.currentVisitData.start_time);
                    $('#visit_date-edit').text(startDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric'}));
                    $('#start_time-edit').val(String(startDate.getHours()).padStart(2,'0') + ':' + String(startDate.getMinutes()).padStart(2,'0'));
                    $('#total_hours-edit').val(Math.floor(this.state.currentVisitData.duration_minutes / 60));
                    $('#note-edit').val(this.state.currentVisitData.note || '');
                    this.elements.pageContainer.removeClass('view-mode').addClass('edit-mode');
                } else {
                    this.elements.pageContainer.removeClass('edit-mode').addClass('view-mode');
                }
            }
        };

        VisitDetailApp.init();
    });
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?=$pageTitle ?? 'Caregiver Addresses'?></title>

    <link rel="apple-touch-icon" sizes="180x180" href="../../img/fav/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../img/fav/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../img/fav/favicon-16x16.png">
    <link rel="manifest" href="../../site.webmanifest">
    <link rel="shortcut icon" href="../../img/fav/favicon.ico">

    <!-- Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

    <style>
        html, body { height: 100vh; overflow: hidden; background-color: #f0f2f5; font-family: 'Segoe UI', 'Roboto', sans-serif; }
        .page-container { display: flex; flex-direction: column; height: 100vh; max-width: 500px; margin: 0 auto; background-color: #ffffff; border-left: 1px solid #dcdcdc; border-right: 1px solid #dcdcdc; position: relative; }

        /* Header & User Info */
        .header { display: flex; justify-content: space-between; align-items: center; padding: 1rem; position: relative; }
        .back-button { text-decoration: none; color: #333; font-weight: 500; }
        .header-title-group { position: absolute; left: 50%; transform: translateX(-50%); text-align: center; }
        .header-title { font-size: 1.8rem; font-weight: bold; margin: 0; }
        .profile-icon { font-size: 1.5rem; border: 2px solid #000; border-radius: 50%; width: 45px; height: 45px; display: flex; align-items: center; justify-content: center; margin: 0 auto; overflow: hidden; }
        .profile-icon img { width: 100%; height: 100%; object-fit: cover; }
        .profile-username { font-size: 0.8rem; color: #555; margin-top: 4px; }
        .user-info-section { display: flex; padding: 1rem; gap: 1rem; align-items: center; border-bottom: 1px solid #e0e0e0; flex-shrink: 0; }
        .user-avatar-container { text-align: center; }
        .user-avatar { width: 80px; height: 80px; border: 2px solid #000; padding: 0.3rem; display: flex; align-items: center; justify-content: center; overflow: hidden; border-radius: 8px; }
        .user-avatar img { width: 100%; height: 100%; object-fit: cover; }
        .user-role { font-weight: 500; font-size: 0.9rem; }
        .user-name-container { font-size: 1.1rem; font-weight: 500; }

        /* Address List */
        .address-list-container { flex-grow: 1; overflow-y: auto; padding: 1rem; padding-bottom: 120px; }
        .address-item { display: flex; align-items: center; gap: 1rem; border: 2px solid #000; border-radius: 15px; padding: 1rem; margin-bottom: 1rem; cursor: pointer; transition: background-color 0.2s; }
        .address-item:hover { background-color: #f1f1f1; }
        .address-icon { font-size: 2.5rem; color: #333; }
        .address-details { line-height: 1.4; }
        .address-line-1 { font-weight: bold; }

        /* FAB, Modals & Alerts */
        .fab { position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); width: 80px; height: 80px; border-radius: 50%; background-color: #e0e0e0; border: 3px solid #000; display: flex; flex-direction: column; align-items: center; justify-content: center; font-weight: 500; text-decoration: none; color: #000; box-shadow: 0 4px 8px rgba(0,0,0,0.2); z-index: 1040; }
        .fab .plus-icon { font-size: 2rem; line-height: 1; }
        #alert-container { position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index: 2000; width: 90%; max-width: 480px; }
        .confirmation-modal-body { display: flex; justify-content: space-around; text-align: center; padding: 1.5rem 0; }
        .confirmation-option { cursor: pointer; }
        .confirmation-option:hover { opacity: 0.8; }
        .confirmation-option i { font-size: 3rem; margin-bottom: 0.5rem; display: block; color: #fff; background-color: #000; border-radius: 15px; padding: 0.5rem; }
    </style>
</head>
<body>

<div id="alert-container"></div>

<div class="page-container">
    <header class="header">
        <a href="#" class="back-button" id="back-button"><i class="fas fa-chevron-left"></i> Back</a>
        <div class="header-title-group"><h1 class="header-title"><?=$pageTitle ?? 'Caregiver Addresses'?></h1></div>
        <div class="profile">
            <div class="profile-icon"><img src="<?=$photo?>" alt="avatar"></div>
            <span class="profile-username"><?=$fullname?></span>
        </div>
    </header>

    <section class="user-info-section">
        <div class="user-avatar-container">
            <div class="user-avatar"><img id="caregiver-avatar-img" src="" style="display:none;" alt="Caregiver"></div>
            <div class="user-role" id="caregiver-role">Caregiver</div>
        </div>
        <div class="user-name-container">
            <div id="caregiver-firstname"></div>
            <div id="caregiver-middlename"></div>
            <div id="caregiver-lastname"></div>
        </div>
    </section>

    <main class="address-list-container">
        <div id="address-list"><div class="text-center p-5"><div class="spinner-border"></div></div></div>
    </main>
</div>

<a href="#" class="fab" id="add-address-btn"><div class="plus-icon">+</div><div>Address</div></a>

<div class="modal fade" id="confirmEditModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Edit Address</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body"><h4 class="text-center">Confirm to edit this address?</h4><div class="confirmation-modal-body"><div class="confirmation-option" id="confirm-yes-btn"><i class="fa-solid fa-check"></i>Yes</div><div class="confirmation-option" data-bs-dismiss="modal"><i class="fa-solid fa-xmark"></i>No</div></div></div></div></div></div>
<div class="offcanvas offcanvas-bottom" tabindex="-1" id="addressFormOffcanvas" style="height: auto;"><div class="offcanvas-header"><h5 class="offcanvas-title w-100 text-center" id="offcanvas-title"></h5><button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button></div><div class="offcanvas-body"><form id="address-form" class="mx-auto" style="max-width: 400px;" onsubmit="return false;"><input type="hidden" id="form-address-id"><div class="mb-3"><label class="form-label">Address</label><input type="text" class="form-control" id="form-address" required></div><div class="mb-3"><label class="form-label">City</label><input type="text" class="form-control" id="form-city" required></div><div class="mb-3"><label class="form-label">Zip Code</label><input type="text" class="form-control" id="form-zipcode" required></div><div class="mb-3"><label class="form-label">Type</label><select class="form-select" id="form-type"><option value="House">House</option><option value="Apartment">Apartment</option><option value="Other">Other</option></select></div><div class="mb-3"><label class="form-label">County</label><input type="text" class="form-control" id="form-county"></div><div class="mb-3"><label class="form-label">State</label><input type="text" class="form-control" id="form-state" value="MI" disabled></div><div class="mb-3"><label class="form-label">Country</label><input type="text" class="form-control" id="form-country" value="United States" disabled></div><button type="submit" class="btn w-100" style="border: 2px solid #000; font-weight: 500;" id="save-address-btn">Save</button></form></div></div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function() {
        const CaregiverAddressesApp = {
            state: {
                targetUserId: <?= json_encode($targetUserId ?? null) ?>,
                personType: <?= json_encode($personType ?? 0) ?>, // 0 for Caregiver
                baseUrl: <?= json_encode($baseUrl ?? '') ?>,
                authToken: <?= json_encode($authToken ?? '') ?>,
                allAddresses: [],
                selectedAddressId: null,
            },
            elements: {
                alertContainer: $('#alert-container'), caregiverAvatar: $('#caregiver-avatar-img'),
                caregiverFirstname: $('#caregiver-firstname'), caregiverMiddlename: $('#caregiver-middlename'), caregiverLastname: $('#caregiver-lastname'),
                addressList: $('#address-list'), addAddressBtn: $('#add-address-btn'),
                backBtn: $('#back-button'), confirmYesBtn: $('#confirm-yes-btn'),
                offcanvasTitle: $('#offcanvas-title'), addressForm: $('#address-form'),
            },
            modals: { offcanvas: null, confirmation: null },

            init() {
                if (!this.state.targetUserId) { this.helpers.showAlert('Target User ID is missing.', 'danger'); return; }
                this.modals.offcanvas = new bootstrap.Offcanvas('#addressFormOffcanvas');
                this.modals.confirmation = new bootstrap.Modal('#confirmEditModal');
                this.bindEvents();
                this.api.fetchInitialData();
            },

            bindEvents() {
                this.elements.backBtn.on('click', e => { e.preventDefault(); window.history.back(); });
                this.elements.addAddressBtn.on('click', e => { e.preventDefault(); this.handlers.openForm('add'); });
                this.elements.addressList.on('click', '.address-item', this.handlers.onAddressClick);
                this.elements.confirmYesBtn.on('click', this.handlers.onConfirmEdit);
                this.elements.addressForm.on('submit', this.handlers.onFormSubmit);
            },

            handlers: {
                onAddressClick(e) { CaregiverAddressesApp.state.selectedAddressId = $(e.currentTarget).data('address-id'); CaregiverAddressesApp.modals.confirmation.show(); },
                onConfirmEdit() {
                    const app = CaregiverAddressesApp;
                    const address = app.state.allAddresses.find(addr => addr.id == app.state.selectedAddressId);
                    app.modals.confirmation.hide();
                    if (address) app.handlers.openForm('edit', address);
                },
                openForm(mode, data = null) {
                    const app = CaregiverAddressesApp;
                    app.elements.addressForm[0].reset();
                    app.elements.offcanvasTitle.text(mode === 'edit' ? 'Edit Address' : 'Add New Address');
                    $('#form-address-id').val(data ? data.id : '');
                    if (data) {
                        $('#form-address').val(data.address); $('#form-city').val(data.city);
                        $('#form-zipcode').val(data.zipcode); $('#form-type').val(data.type);
                        $('#form-county').val(data.county);
                    }
                    app.modals.offcanvas.show();
                },
                onFormSubmit(e) {
                    e.preventDefault();
                    const app = CaregiverAddressesApp;
                    const addressId = $('#form-address-id').val();
                    const payload = {
                        person_id: app.state.targetUserId, person_type: app.state.personType,
                        address: $('#form-address').val(), city: $('#form-city').val(),
                        zipcode: $('#form-zipcode').val(), type: $('#form-type').val(),
                        county: $('#form-county').val(), state: "MI", country: "United States",
                    };
                    app.api.saveAddress(payload, addressId);
                }
            },

            api: {
                _ajax: settings => $.ajax({ ...settings, headers: { 'Authorization': CaregiverAddressesApp.state.authToken }, dataType: 'json' }).fail(err => CaregiverAddressesApp.helpers.showAlert(err.responseJSON?.message || 'API request failed.', 'danger')),

                fetchInitialData() {
                    $.when(
                        this._ajax({ url: `${CaregiverAddressesApp.state.baseUrl}/account/${CaregiverAddressesApp.state.targetUserId}` }),
                        this._ajax({ url: `${CaregiverAddressesApp.state.baseUrl}/address/person/${CaregiverAddressesApp.state.targetUserId}/${CaregiverAddressesApp.state.personType}` })
                    ).done((userApiResponse, addressApiResponse) => {
                        const userData = userApiResponse[0].data;
                        const addressesData = addressApiResponse[0].data;

                        CaregiverAddressesApp.render.userHeader(userData);
                        CaregiverAddressesApp.state.allAddresses = addressesData;
                        CaregiverAddressesApp.render.addressList(addressesData);
                    }).fail(() => CaregiverAddressesApp.helpers.showAlert('Could not load initial page data.', 'danger'));
                },

                fetchAddresses() {
                    return this._ajax({ url: `${CaregiverAddressesApp.state.baseUrl}/address/person/${CaregiverAddressesApp.state.targetUserId}/${CaregiverAddressesApp.state.personType}` })
                        .done(res => {
                            CaregiverAddressesApp.state.allAddresses = res.data;
                            CaregiverAddressesApp.render.addressList(res.data);
                        });
                },

                saveAddress(payload, addressId = null) {
                    const isEdit = !!addressId;
                    this._ajax({
                        url: isEdit ? `${CaregiverAddressesApp.state.baseUrl}/address/${addressId}` : `${CaregiverAddressesApp.state.baseUrl}/address`,
                        type: isEdit ? 'PUT' : 'POST',
                        contentType: 'application/json', data: JSON.stringify(payload),
                    }).done(() => {
                        CaregiverAddressesApp.helpers.showAlert(`Address successfully ${isEdit ? 'updated' : 'added'}!`, 'success');
                        CaregiverAddressesApp.modals.offcanvas.hide();
                        this.fetchAddresses();
                    });
                }
            },

            render: {
                userHeader(data) {
                    if (!data) return;
                    const photoUrl = data.photo ? CaregiverAddressesApp.state.baseUrl + data.photo : 'https://via.placeholder.com/80';
                    CaregiverAddressesApp.elements.caregiverAvatar.attr('src', photoUrl).fadeIn();
                    CaregiverAddressesApp.elements.caregiverFirstname.text(data.firstname || '');
                    CaregiverAddressesApp.elements.caregiverMiddlename.text(data.middlename || '');
                    CaregiverAddressesApp.elements.caregiverLastname.text(data.lastname || '');
                },
                addressList(addresses) {
                    const container = CaregiverAddressesApp.elements.addressList.empty();
                    if (!addresses?.length) { container.html('<p class="text-center text-muted mt-4">No addresses found for this caregiver.</p>'); return; }
                    const itemsHTML = addresses.map(addr => {
                        const icon = addr.type === 'Apartment' ? 'fa-building' : 'fa-house';
                        return `
                            <div class="address-item" data-address-id="${addr.id}">
                                <i class="fa-solid ${icon} address-icon"></i>
                                <div class="address-details">
                                    <div class="address-line-1">${addr.address}</div>
                                    <div>${addr.city}, ${addr.state} ${addr.zipcode}</div>
                                </div>
                            </div>`;
                    }).join('');
                    container.html(itemsHTML);
                }
            },

            helpers: {
                showAlert(message, type = 'success') {
                    const alertHTML = `<div class="alert alert-${type} alert-dismissible fade show">${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`;
                    CaregiverAddressesApp.elements.alertContainer.html(alertHTML).children().delay(4000).fadeOut();
                },
            }
        };

        CaregiverAddressesApp.init();
    });
</script>
</body>
</html>